<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>暑假最后几天！肝爆（手写）一个Spring之Day1</title>
    <link href="/2022/08/14/spring_day01/"/>
    <url>/2022/08/14/spring_day01/</url>
    
    <content type="html"><![CDATA[<h1 id="Day01—Spring预热"><a href="#Day01—Spring预热" class="headerlink" title="Day01—Spring预热"></a>Day01—Spring预热</h1><p>不废话，直接进入正文！！！</p><p>[TOC]</p><h2 id="Spring的设计初衷"><a href="#Spring的设计初衷" class="headerlink" title="Spring的设计初衷"></a>Spring的设计初衷</h2><ul><li>根本使命：<strong>简化开发</strong></li><li>4个关键策略（如何完成使命）：<ul><li>基于POJO的轻量级和最小侵入性编程</li><li>通过依赖注入和面向接口实现松耦合</li><li>基于切面和惯性进行声明式编程</li><li>通过切面和模版减少样版式代码</li></ul></li><li>通过面相Bean(BOP)、依赖注入(DI)及面向切面(AOP)这三种方式兑现吹过的🐮</li></ul><h2 id="Spring的系统架构"><a href="#Spring的系统架构" class="headerlink" title="Spring的系统架构"></a>Spring的系统架构</h2><ul><li><p>核心容器</p><ul><li>spring-beans和spring-core：spring的核心模块，包含了控制反转（IoC）和依赖注入（DI）。<ul><li>BeanFactory用IoC对应用程序的配置和依赖性规范与实际的应用程序代码进行分离。</li><li>注：BeanFactory实例化后并不会实例化Bean</li></ul></li><li>spring-context：构建于核心模块之上，扩展了BeanFactory，为它添加了Bean生命周期控制、框架事件体系及资源加载透明化等功能。<ul><li>ApplicationContext是该模块的核心接口，其超类是BeanFactory,不同点在于ApplicationContext实例化后自动化对所有的单实例Bean进行实例化与依赖关系的装配，使之处于待用状态。</li></ul></li><li>Spring-context-support：对SpringIoC容器及IoC子容器的扩展支持</li><li>Spring-context-indexer：Spring类的管理组件和Classpath扫描组件</li><li>Spring-expression：统一表达式语言(EL)的扩展，可以查询、管理运行中的对象，同时也可以方便的调用对象方法、以及操作数组、集合等。</li></ul></li><li><p>AOP和设备支持</p><ul><li>spring-aop：另一个核心模块，AOP主要实现模块。</li><li>spring-aspects：集成自AspectJ框架，主要为Sping提供多种AOP实现方法。</li><li>spring-instrument：基于JavaSE中的java.lang.instrument进行设计的,应该算是AOP的一个支援模块，主要作用是JVM启用时生成的一个代理类。</li></ul></li><li><p>数据访问与集成</p><ul><li>spring-jdbc：Spring提供的JDBC抽象框架的主要实现模块，用于简化Spring JDBC操作。</li><li>spring-tx：Spring JDBC事务控制实现模块。</li><li>spring-orm：ORM框架支持模块，主要集成Hibernate,Java Persistence API(JPA)和Java Data Objects(JDO)用于资源管理、数据访问对象的实现和事务策略。</li><li>spring-oxm：提供一个抽象层以支撑OXM（Object和XML的映射）</li><li>spring-jms：能够发送和接受信息</li></ul></li><li><p>Web组件</p><ul><li>spring-web：Spring提供的最基础的Web支持，主要简历在核心容器之上，通过Servlet或者Listeners来初始化Ioc容器，也包含一些与Web相关的支持。</li><li>spring-webmvc：Spring MVC</li><li>spring-websocket：与Web前端进行全双工通信的协议。</li><li>spring-webflux：一个新的非堵塞函数式Reactive Web框架，可以用来构建异步的、非阻塞的、事件驱动的服务、扩展性非常好。</li></ul></li><li><p>通信报文</p><ul><li>spring-message：为Spring框架集成一些基础的报文传送应用。</li></ul></li><li><p>集成测试</p><ul><li>spring-test：提供测试支持</li></ul></li><li><p>集成兼容</p><ul><li>spring-framework-bom：主要解决Spring的不同模块依赖版本不同的问题</li></ul></li><li><p>模块之间依赖关系</p><p><img src="https://img-blog.csdnimg.cn/04b5b226e7174b52bc02410275c9975b.png" alt="在这里插入图片描述"></p></li></ul><h2 id="Spring-IoC运行时序"><a href="#Spring-IoC运行时序" class="headerlink" title="Spring IoC运行时序"></a>Spring IoC运行时序</h2><ul><li>IoC回顾：Inversion of Control 控制反转，就是把原来代码里需要实现的对象创建、依赖，反转给容器帮忙实现。</li></ul><p><img src="https://img-blog.csdnimg.cn/a1982e05ee9e4b5d833d511a717e5658.png" alt="在这里插入图片描述"></p><ul><li>这里我画了一张详细的时序图</li><li>简单概括就是三个基本步骤：<ul><li>初始化的入口由容器实现中的refresh()方法完成调用</li><li>对Bean定义载入IoC容器使用的方法是loadBeanDefinition()</li><li>注册之后就可以通过BeanFactory和ApplicationContext来享受SpringIoC的服务了</li></ul></li></ul><h2 id="Spring-DI运行时序"><a href="#Spring-DI运行时序" class="headerlink" title="Spring DI运行时序"></a>Spring DI运行时序</h2><ul><li><p>DI回顾：Dependency Injection 依赖注入</p></li><li><p>DI发生的时间：</p><ul><li>用户第一次调用getBean()方法时,IoC容器触发依赖注入</li><li>当用户在配置文件中将<bean>元素配置了lay-init&#x3D;false属性是，即让容器在解析注册Bean定义时进行预实例化，触发依赖注入（延时加载：可以提高第一次获取Bean的性能）</bean></li></ul></li><li><p>主要分为二个步骤：</p><ul><li>调用createBeanInstance()方法生成Bean所包含的Java对象实例</li><li>调用populateBean()方法对Bean属性的依赖注入进行处理</li></ul></li><li><p>IoC容器是如何将属性值注入Bean实例对象上的：</p><ul><li>对于集合类型的属性，将属性值解析为目标类型的结合后直接赋值给属性</li><li>对于非集合类型的属性，大量使用JDK的反射机制，通过属性的getter()方法获取指定属性注入前的值，同时调用属性的setter()方法为属性设置注入后的值</li></ul></li><li><p>详细时序图</p></li></ul><p><img src="https://img-blog.csdnimg.cn/c8b884c87f424dfdab7097d4504ae8a5.png" alt="在这里插入图片描述"></p><h2 id="Spring-AOP时序"><a href="#Spring-AOP时序" class="headerlink" title="Spring AOP时序"></a>Spring AOP时序</h2><ul><li>AOP回顾：Aspect Oriented Programming 面向切面编程，可以通过预编译和运行时的动态代理，实现在不修改源代码的情况下给程序动态统一添加功能。</li><li>大致步骤：<ul><li>BeanPostProcessor初始化</li><li>选择代理策略</li><li>调用代理方法</li><li>触发通知</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/f6808948e2d946c3bd20a8dd57a31b5e.png" alt="在这里插入图片描述"></p><h2 id="Spring-MVC时序"><a href="#Spring-MVC时序" class="headerlink" title="Spring MVC时序"></a>Spring MVC时序</h2><ul><li><p>一张经典图片回顾mvc的请求处理流程：</p></li><li><p><img src="https://img-blog.csdnimg.cn/2020072519232190.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTMwMDQzNw==,size_16,color_FFFFFF,t_70" alt="img"></p></li><li><p>九大组件：</p><ul><li>HandlerMapping：用来查找Handler的，也就是处理器，可以是类也可以是方法。<ul><li>例子：标注了***@RequestMapping***的每个方法就可以看成一个Handler。</li><li>作用：找到请求对应的处理器Handler和Interceptor</li></ul></li><li>HandlerAdapter：适配器，因为Handler形式任意，但请求交给Servlet的方法节后都是doService(HttpServletRequest req,HttpServletResponse res)形式的，终究适配过程就是靠它。</li><li>HandlerExceptionResolver：处理Handler产生的异常情况的组件</li><li>ViewResolver：视图解析器。<ul><li>核心方法：resolveViewName(),一个参数是String类型ViewName，另一个是Locale</li><li>作用：将String类型的视图名和Locale解析为View类型的视图</li><li>默认情况下，会为我们自动配置一个InternalResourceViewResolver</li></ul></li><li>RequestToViewNameTranslator:从请求中获取ViewName。因为ViewResolver根据ViewName查找View，但有些Handler处理完成之后没有设置View和ViewName。</li><li>LocaleReslover：从请求中解析Locale。</li><li>ThemeResolver：解析主题的。</li><li>MultipartReslover：处理上传请求，通过将普通的请求包装成MultipartHttpServletRequest来实现（使其可以上传文件等等）。</li><li>FlashMapManager：管理FlashMap。<ul><li>什么是FlashMap：用于重定向时的参数传递</li></ul></li></ul></li><li><p>大致步骤可分为三步：</p><ul><li>ApplicationContext初始化时用Map保存所有的URL和Controller类的对应关系。</li><li>根据请求URL找到对应的Controller，并从Controller中找到处理请求的方法。</li><li>将Request参数绑定到方法的参数上，执行方法处理请求，并返回结果视图。</li></ul></li><li><p>时序图(画的好累🤮，但是为了职业素养)</p></li></ul><p><img src="https://img-blog.csdnimg.cn/1b8736233c2d4144bbdea5d88e5c5b58.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>手写spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2022/08/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/08/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式（updating）"><a href="#设计模式（updating）" class="headerlink" title="设计模式（updating）"></a>设计模式（updating）</h1><p>[TOC]</p><h2 id="1-工厂模式"><a href="#1-工厂模式" class="headerlink" title="1.工厂模式"></a>1.工厂模式</h2><h2 id="2-单例模式"><a href="#2-单例模式" class="headerlink" title="2.单例模式"></a>2.单例模式</h2><h2 id="3-原型模式"><a href="#3-原型模式" class="headerlink" title="3.原型模式"></a>3.原型模式</h2><h2 id="4-代理模式"><a href="#4-代理模式" class="headerlink" title="4.代理模式"></a>4.代理模式</h2><h2 id="5-委派模式"><a href="#5-委派模式" class="headerlink" title="5. 委派模式"></a>5. 委派模式</h2><h2 id="6-策略模式"><a href="#6-策略模式" class="headerlink" title="6.策略模式"></a>6.策略模式</h2><h2 id="7-模版模式"><a href="#7-模版模式" class="headerlink" title="7.模版模式"></a>7.模版模式</h2><h2 id="8-适配器模式"><a href="#8-适配器模式" class="headerlink" title="8.适配器模式"></a>8.适配器模式</h2><h2 id="9-装饰者模式"><a href="#9-装饰者模式" class="headerlink" title="9.装饰者模式"></a>9.装饰者模式</h2><h2 id="10-观察者模式"><a href="#10-观察者模式" class="headerlink" title="10.观察者模式"></a>10.观察者模式</h2>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>软件架构设计原则迅速回忆</title>
    <link href="/2022/08/13/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%9B/"/>
    <url>/2022/08/13/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="软件架构设计原则"><a href="#软件架构设计原则" class="headerlink" title="软件架构设计原则"></a>软件架构设计原则</h1><h2 id="1-开闭原则"><a href="#1-开闭原则" class="headerlink" title="1.开闭原则"></a>1.开闭原则</h2><ul><li><p>是什么：开闭原则就是指一个软件实体应该对库欧战开放,对修改关闭。</p></li><li><p>为什么：提高软件系统的可复合性及可维护性。指导我们如何建立稳定、灵活的系统。</p></li><li><p>怎么做：</p><ul><li><p>例如版本更新，我们应尽可能不修改源代码，但是可以新增功能</p></li><li><p>稍微具体的例子：类实现了接口，那么我们想扩展其功能的时候，作一个实现了接口的类的子类就是个不错的方式。</p></li></ul></li></ul><h2 id="2-依赖倒置原则"><a href="#2-依赖倒置原则" class="headerlink" title="2.依赖倒置原则"></a>2.依赖倒置原则</h2><ul><li>是什么：细节依赖抽象</li><li>简单来说就是面向接口编程，先顶层再细节设计代码结构</li></ul><h2 id="3-单一职责原则"><a href="#3-单一职责原则" class="headerlink" title="3.单一职责原则"></a>3.单一职责原则</h2><ul><li>是什么：不要存在多于一个导致类变更的原因。</li><li>为什么：解藕</li></ul><h2 id="4-接口隔离原则"><a href="#4-接口隔离原则" class="headerlink" title="4.接口隔离原则"></a>4.接口隔离原则</h2><ul><li>是什么：用多个专门的接口，客户端不应该依赖它不需要的接口</li><li>怎么做：<ul><li>一个类对应另一个类的依赖应该建立在最小的接口之上</li><li>建立单一接口，不要建立庞大臃肿的接口</li><li>尽量细化接口，接口中的方法尽量少，不是越少越好</li></ul></li></ul><h2 id="5-迪米特原则（最少知道原则）"><a href="#5-迪米特原则（最少知道原则）" class="headerlink" title="5.迪米特原则（最少知道原则）"></a>5.迪米特原则（最少知道原则）</h2><ul><li>是什么：一个对象应该对其他对象保持最少的了解</li><li>为什么：降低耦合</li><li>强调：只和朋友交流，不和陌生人说话。出现在成员变量、方法的输入、输出参数中的类都可以称之为朋友类，反之不是。</li></ul><h2 id="6-里氏替换原则"><a href="#6-里氏替换原则" class="headerlink" title="6.里氏替换原则"></a>6.里氏替换原则</h2><ul><li>一句话：子类可以扩展父类的功能，但不能改变父类的原有功能</li><li>为什么：约束继承泛滥，加强程序健壮性</li><li>怎么做：<ul><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。</li><li>子类可以增加自己特有的方法。</li><li>当子类的方法重载父类的方法时，方法的前置条件（方法的输入&#x2F;参数）要比父类方法的输入参数更宽松</li><li>当子类实现父类方法时，方法的后置条件（方法的输出&#x2F;返回值）要比父类更严格或与父类一样</li></ul></li></ul><h2 id="7-合成复用原则"><a href="#7-合成复用原则" class="headerlink" title="7.合成复用原则"></a>7.合成复用原则</h2><ul><li><p>是什么：尽量使用对象组合&#x2F;聚合而不是继承关系达到软件复用的目的。</p></li><li><p>为什么：可以使系统更加灵活</p></li><li><p>怎么做：来个例子（以数据库为例）</p><ul><li><div class="code-wrapper"><pre><code class="java">public class DBConnection&#123;    public String getConnection()&#123;    return &quot;Mysql数据库连接&quot;;  &#125;&#125;<div class="code-wrapper"><pre><code class="hljs csharp">- ```java  <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ProductDao</span>&#123;    <span class="hljs-keyword">private</span> DBConnection dbConnection;<span class="hljs-comment">//这里就体现了合成复用原则</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDbConnection</span>(<span class="hljs-params">DBConnection dbConnection</span>)</span>&#123;      <span class="hljs-keyword">this</span>.dbConnection = dbConnection;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addProduct</span>()</span>&#123;      String conn = dbConnection.getConnection();      System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;使用&quot;</span>+cnn+<span class="hljs-string">&quot;增加产品&quot;</span>);    &#125;  &#125;</code></pre></div></div></code></pre></li><li><p>当然有些违背了其他原则，但为了突出合成复用原则，这里不做扩展。实际开发过程中，也不必刻意追求完美，学会平衡取舍，写出优雅。</p></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/08/10/CTF_show_Web%E5%85%A5%E9%97%A8_phpCVE/"/>
    <url>/2022/08/10/CTF_show_Web%E5%85%A5%E9%97%A8_phpCVE/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Nmap使用姿势</title>
    <link href="/2022/08/10/nmap%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/"/>
    <url>/2022/08/10/nmap%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="Nmap使用姿势"><a href="#Nmap使用姿势" class="headerlink" title="Nmap使用姿势"></a>Nmap使用姿势</h1><h3 id="列举远程机器开放的端口"><a href="#列举远程机器开放的端口" class="headerlink" title="列举远程机器开放的端口"></a>列举远程机器开放的端口</h3><ul><li><p>例：<code>nmap scanme.nmap.org</code>（扫描）</p></li><li><p>例：<code>nmap --dns-servers 8.8.8.8 scanme.nmap.org</code>（–dns-server指定dns服务器进行解析）</p></li><li><p>例：<code>nmap Pn scanme.nmap.org</code>（-Pn参数来停止探测之前的ICMP请求，防止防火墙突破）</p></li><li><p>例：<code>nmap -p 1-1000 scanme.nmap.org</code>（-p m-n 指定端口范围为m到n）</p></li><li><div class="code-wrapper"><pre><code class="hljs">端口状态：- Open 开放- Closed 关闭- Filtered 过滤无法收到返回的probe状态- UnFiltered 端口收到返回的probe，但无法确认</code></pre></div></li></ul><h3 id="识别服务指纹"><a href="#识别服务指纹" class="headerlink" title="识别服务指纹"></a>识别服务指纹</h3><ul><li>识别机器的服务信息: <code>nmap -sV IP地址</code></li><li>侵略性探测: <code>nmap -A -v -T4 IP地址</code></li><li>侵略性探测: <code>nmap  -sC -sV -O IP地址</code><ul><li>-sC：使用脚本探测</li><li>-sV：探测目标机器的服务信息</li><li>-O：探测目标机器的操作系统信息</li></ul></li></ul><h3 id="发现局域网中存活主机"><a href="#发现局域网中存活主机" class="headerlink" title="发现局域网中存活主机"></a>发现局域网中存活主机</h3><ul><li><p>对网络中所有主机进行ping扫描，以探测主机存活性</p><ul><li><code>nmap -sP CIDR </code></li><li><code>nmap -sn CIDR</code></li></ul></li><li><p>nmap -sn CIDR -oX test.xml    结果输出到test.xml</p></li></ul><h3 id="端口探测技巧"><a href="#端口探测技巧" class="headerlink" title="端口探测技巧"></a>端口探测技巧</h3><ul><li><p>对某个端口进行探测</p><ul><li><code>nmap -p80 scanme.nmap.org</code></li><li><code>nmap -p80,135 scaneme.nmap.org</code></li></ul></li><li><p>对某个范围端口进行探测</p><ul><li><code>nmap -p 1-100 scanme.nmap.org</code></li></ul></li><li><p>指定协议探测端口</p><ul><li><code>nmap -p T:25,U:53 scanme.nmap.org</code>（T：TCP，U：UDP）</li></ul></li><li><p>通过协议名扫描端口</p><ul><li><code>nmap -p smtp scanme.nmap.org</code></li></ul></li><li><p>通过名称范围扫描</p><ul><li><code>nmap -p s* scanme.nmap.org</code></li></ul></li><li><p>扫描注册在nmap中的端口</p><ul><li><code>nmap -p [1-65535] scanme.nmap.org</code></li></ul></li></ul><h3 id="NSE脚本"><a href="#NSE脚本" class="headerlink" title="NSE脚本"></a>NSE脚本</h3><ul><li><p>使用 –script参数来指定调用的脚本,并且将脚本存储在Nmap安装路径下的script文件夹下面，对于kali linux存储在&#x2F;usr&#x2F;share&#x2F;nmap&#x2F;script&#x2F;下</p><ul><li><code>nmap --script http-headers scanme.nmap.org </code>（探测http请求头）</li><li><code>nmap -sV --script vuln 目标</code>（使用nmap中漏洞分类脚本对目标进行探测）</li><li><code>nmap -sV --script=&quot;version, discovery&quot; 目标</code>（使用nmap中发现和版本信息分类进行探测）</li><li><code>nmap -sV --script=&quot;not exploit&quot; 目标</code>（使用nmap中除了exploit分类之外的其他分类进行探测）</li></ul></li><li><p><strong>NSE调试功能使用</strong></p><ul><li><code>nmap -sV --script exploit -d 3 --script-trace 目标</code>（使用nmap中的expolit，但是同时开启调试模式）<ul><li>-d(debug范围0～9)</li></ul></li></ul></li><li><p><code>nmap -sV --script http-title --script-args http.useragent=&quot;Mozilla 999&quot; 目标</code>（使用nmap的http-title脚本，并且指定使用的User-Agent）</p></li><li><p><strong>NSE更新</strong><code>nmap -script-updatedb</code></p></li><li><p><strong>NSE脚本分类</strong> <a href="https://nmap.org/nsedoc/">https://nmap.org/nsedoc/</a></p></li></ul><h3 id="使用特定网卡进行探测"><a href="#使用特定网卡进行探测" class="headerlink" title="使用特定网卡进行探测"></a>使用特定网卡进行探测</h3><ul><li><code>nmap -e 网卡(interface) 目标</code></li></ul><h3 id="对比探测结果"><a href="#对比探测结果" class="headerlink" title="对比探测结果"></a>对比探测结果</h3><ul><li>利用ndiff工具</li><li><code>ndiff file1 file2</code></li><li>例子：<code>ndiff kali.xml kali2.xml</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF_show_Web入门_nodejs</title>
    <link href="/2022/07/31/CTF_show_Web%E5%85%A5%E9%97%A8_nodejs/"/>
    <url>/2022/07/31/CTF_show_Web%E5%85%A5%E9%97%A8_nodejs/</url>
    
    <content type="html"><![CDATA[<p><a href="http://118.178.126.49/blogs/CTF_show_Web%E5%85%A5%E9%97%A8_nodejs.html">http://118.178.126.49/blogs/CTF_show_Web入门_nodejs.html</a></p>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/07/30/%E6%B1%87%E7%BC%96/"/>
    <url>/2022/07/30/%E6%B1%87%E7%BC%96/</url>
    
    <content type="html"><![CDATA[<h1 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h1><hr><ul><li><p>i++</p><div class="code-wrapper"><pre><code class="hljs x86asm"><span class="hljs-keyword">xor</span> <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, <span class="hljs-number">10</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>, <span class="hljs-built_in">eax</span><span class="hljs-keyword">inc</span> <span class="hljs-built_in">eax</span></code></pre></div></li><li><p>++i</p><div class="code-wrapper"><pre><code class="hljs x86asm"><span class="hljs-keyword">xor</span> <span class="hljs-built_in">eax</span>, <span class="hljs-built_in">eax</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, <span class="hljs-number">10</span><span class="hljs-keyword">inc</span> <span class="hljs-built_in">eax</span><span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebx</span>, <span class="hljs-built_in">eax</span></code></pre></div></li></ul><hr><ul><li>call</li><li>jmp</li><li>ret</li><li>sub剪</li><li>lea 取 &amp;</li></ul><hr><ul><li>&#96;&#96;&#96;c<br>int show(int a, int b) {<br>if (a &gt; b) return 10;<br>else return 20;<br>}<div class="code-wrapper"><pre><code class="hljs x86asm">- <span class="hljs-string">```</span><span class="hljs-symbol">  show:</span>  <span class="hljs-keyword">push</span> <span class="hljs-built_in">ebp</span>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ebp</span>, <span class="hljs-built_in">esp</span>     <span class="hljs-comment">;开辟栈帧</span>    <span class="hljs-comment">;这二行代码之间，寄存器可以随便用</span>  <span class="hljs-keyword">push</span> <span class="hljs-built_in">si</span>    <span class="hljs-comment">;怎么取到传入的参数</span>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">bx</span>, [<span class="hljs-built_in">bp</span>+<span class="hljs-number">2</span>*<span class="hljs-number">3</span>]<span class="hljs-comment">;第二个参数</span>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">ax</span>, [ap+<span class="hljs-number">2</span>*<span class="hljs-number">2</span>]<span class="hljs-comment">;第一个参数</span>    <span class="hljs-keyword">cmp</span> <span class="hljs-built_in">ax</span>, <span class="hljs-built_in">bx</span>  <span class="hljs-keyword">jg</span> .greather<span class="hljs-symbol">  </span><span class="hljs-symbol">  </span><span class="hljs-symbol">  .greather:</span>  <span class="hljs-keyword">mov</span> <span class="hljs-built_in">eax</span>, <span class="hljs-number">10</span><span class="hljs-symbol">  </span><span class="hljs-symbol">  </span><span class="hljs-symbol">  .return:</span>  <span class="hljs-keyword">pop</span> <span class="hljs-built_in">si</span>    <span class="hljs-keyword">mov</span> <span class="hljs-built_in">esp</span>, <span class="hljs-built_in">ebp</span>  <span class="hljs-keyword">pop</span> <span class="hljs-built_in">ebp</span><span class="hljs-comment">;这二句等同于leave</span>    <span class="hljs-keyword">ret</span></code></pre></div></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF_show_Web入门_SSRF</title>
    <link href="/2022/07/26/CTF_show_Web%E5%85%A5%E9%97%A8_SSRF/"/>
    <url>/2022/07/26/CTF_show_Web%E5%85%A5%E9%97%A8_SSRF/</url>
    
    <content type="html"><![CDATA[<p><a href="http://118.178.126.49/blogs/CTF_show_Web%E5%85%A5%E9%97%A8_SSRF.html">http://118.178.126.49/blogs/CTF_show_Web入门_SSRF.html</a></p>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF_show_Web入门_XSS</title>
    <link href="/2022/07/24/CTF_show_Web%E5%85%A5%E9%97%A8_XSS/"/>
    <url>/2022/07/24/CTF_show_Web%E5%85%A5%E9%97%A8_XSS/</url>
    
    <content type="html"><![CDATA[<p><a href="http://118.178.126.49/blogs/CTF_show_Web%E5%85%A5%E9%97%A8_XSS.html">http://118.178.126.49/blogs/CTF_show_Web入门_XSS.html</a></p>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF_show_Web入门_sql注入</title>
    <link href="/2022/07/21/CTF_show_Web%E5%85%A5%E9%97%A8_sql%E6%B3%A8%E5%85%A5/"/>
    <url>/2022/07/21/CTF_show_Web%E5%85%A5%E9%97%A8_sql%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p><a href="http://118.178.126.49/blogs/CTF_show_Web%E5%85%A5%E9%97%A8_sql%E6%B3%A8%E5%85%A5.html">http://118.178.126.49/blogs/CTF_show_Web入门_sql注入.html</a></p>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF_show_Web入门_php特性</title>
    <link href="/2022/07/16/CTF_show_Web%E5%85%A5%E9%97%A8_php%E7%89%B9%E6%80%A7/"/>
    <url>/2022/07/16/CTF_show_Web%E5%85%A5%E9%97%A8_php%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p><a href="http://118.178.126.49/blogs/CTF_show_Web%E5%85%A5%E9%97%A8_php%E7%89%B9%E6%80%A7.html">http://118.178.126.49/blogs/CTF_show_Web入门_php特性.html</a></p>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF_show_Web入门_文件包含</title>
    <link href="/2022/07/13/CTF_show_Web%E5%85%A5%E9%97%A8_%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2022/07/13/CTF_show_Web%E5%85%A5%E9%97%A8_%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<p><a href="http://118.178.126.49/blogs/CTF_show_Web%E5%85%A5%E9%97%A8_%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB.html">http://118.178.126.49/blogs/CTF_show_Web入门_文件包含.html</a></p>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF_show_Web入门_命令执行</title>
    <link href="/2022/07/12/CTF_show_Web%E5%85%A5%E9%97%A8_%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2022/07/12/CTF_show_Web%E5%85%A5%E9%97%A8_%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<p><a href="http://118.178.126.49/blogs/CTF_show_Web%E5%85%A5%E9%97%A8_%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C.html">http://118.178.126.49/blogs/CTF_show_Web入门_命令执行.html</a></p>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF_show_Web入门_爆破</title>
    <link href="/2022/07/11/CTF_show_Web%E5%85%A5%E9%97%A8_%E7%88%86%E7%A0%B4/"/>
    <url>/2022/07/11/CTF_show_Web%E5%85%A5%E9%97%A8_%E7%88%86%E7%A0%B4/</url>
    
    <content type="html"><![CDATA[<p><a href="http://118.178.126.49/blogs/CTF_show_Web%E5%85%A5%E9%97%A8_%E7%88%86%E7%A0%B4.html">http://118.178.126.49/blogs/CTF_show_Web入门_爆破.html</a></p>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF_show_Web入门_信息搜集</title>
    <link href="/2022/07/10/CTF-show-Web%E5%85%A5%E9%97%A8-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    <url>/2022/07/10/CTF-show-Web%E5%85%A5%E9%97%A8-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="CTFshow-WriteUps"><a href="#CTFshow-WriteUps" class="headerlink" title="CTFshow WriteUps"></a>CTFshow WriteUps</h1><hr><h2 id="WEB入门"><a href="#WEB入门" class="headerlink" title="WEB入门"></a>WEB入门</h2><hr><h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><ul><li>查看源代码直接找到</li></ul><h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><ul><li>火狐浏览器网址上输入config：about后打开设置禁止js（绕过js前端验证）</li><li>查看源码</li></ul><h3 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h3><ul><li>bp抓包</li><li>把GET改成POST</li><li>Repeat了一下就出来flag了</li></ul><h3 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h3><ul><li>根据提示看一下robots协议</li><li>看到flagishere.txt访问一下</li><li>出flag</li></ul><h3 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h3><ul><li>访问index.phps后下载文件打开即得flag</li></ul><h3 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h3><ul><li>使用diesearch扫出<a href="http://www.zip/">www.zip</a></li><li>访问下载得到flag</li></ul><h3 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h3><ul><li>提示：版本控制很重要</li><li>联想：用什么控制版本？git！</li><li>访问 <em><strong>.git&#x2F;</strong></em> 得flag</li></ul><h3 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h3><ul><li>提示：版本控制很重要（怎么又是这个？）</li><li>联想：除了git还有什么可以控制版本？svn!</li><li>访问 ***.svn&#x2F;***得flag</li></ul><h3 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h3><ul><li>提示：发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了</li><li>联想：vim死机？这不留下vim缓存<ul><li><strong>知识点</strong>：vim 交换文件名<br>在使用vim时会创建临时缓存文件，关闭vim时缓存文件则会被删除，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容<br>以 index.php 为例：第一次产生的交换文件名为 .index.php.swp<br>再次意外退出后，将会产生名为 .index.php.swo 的交换文件<br>第三次产生的交换文件则为 .index.php.swn</li></ul></li><li>此题访问.index.php.swp下载打开得flag</li></ul><h3 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h3><ul><li>看cookie</li></ul><h3 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h3><ul><li><a href="https://zijian.aliyun.com上查一下flag.ctfshow.com/">https://zijian.aliyun.com上查一下flag.ctfshow.com</a></li></ul><h3 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h3><ul><li>提示：有时候网站上的公开信息，就是管理员常用密码</li><li>打开网址（太酷炫，按了5min啥结果没有）</li><li>思考：在哪登陆？试一下login没有 再思考 试一下admin发现找到登陆口</li><li>思考：密码在哪？</li><li>思考提示：最下面找到个数字尝试一下，flag！</li></ul><h3 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h3><ul><li><p>提示：技术文档中不要出现敏感信息，部署到生产环境后及时修改默认密码</p></li><li><p>打开链接，开始闲逛，翻到最底下，技术文档，技术文档，技术文档。。。document？！点开</p></li><li><p>easy</p></li><li><p>点了一下链接，进不去？？？！</p></li><li><p><img src="https://img-blog.csdnimg.cn/8983f88e7e264e92bd52ba5ad94c45e5.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>再看看链接。。。 <strong>your-domain</strong></p></li><li><p>学过英语 dddd</p></li><li><p>拿下</p></li></ul><h3 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h3><ul><li><p>提示：有时候源码里面就不经意间泄漏重要信息（editor）的信息，默认配置害死人</p></li><li><p>dirsearch一下发现&#x2F;editor</p></li><li><p>果断访问一下</p></li><li><p><img src="https://img-blog.csdnimg.cn/42ede35c3e304845887c7801a102507f.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>懵逼1s</p></li><li><p>点提交404（cao，怎么是404）。。。再想想</p></li><li><p>上传图片打开</p></li><li><p><img src="https://img-blog.csdnimg.cn/875fc3b0c3104b95bcafc5c20d718436.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>感觉没什么用啊，崩溃ing</p></li><li><p>随便点一下<strong>图片空间</strong> 哎嗨</p></li><li><p><img src="https://img-blog.csdnimg.cn/57a646bf776f4c17a3af3cd2052aa94f.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>这不就是linux服务器的文件形式吗？想起提示<strong>默认地址</strong></p></li><li><p>&#x2F;var&#x2F;www&#x2F;html&#x2F;nothinghere&#x2F;fl000g.txt</p></li><li><p>找到地址访问得flag！！！</p></li></ul><h3 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h3><ul><li>提示：公开的信息比如邮箱，可能造成信息泄漏，产生严重后果</li><li>打开网页在下面找到一个qq邮箱</li><li>试一下访问&#x2F;admin</li><li>需要密码</li><li>忘记密码</li><li>提示需要问答验证（需要地址）</li><li>qq搜索改qq号发现地址为西安</li><li>输入后重置密码登录获取flag</li></ul><h3 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h3><ul><li><p>看了别人的WP</p></li><li><p><strong>知识点</strong>（查阅可知）：php探针：用来检测空间、服务器运行状况和PHP信息等</p></li><li><p>&#x2F;tz.php访问雅黑PHP探针</p></li><li><p>点击phpinfo</p></li><li><p>ctrl+F搜索ctfshow找到flag</p></li><li><p>长见识了捏</p></li></ul><h3 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h3><ul><li>提示：备份的sql文件会泄漏敏感信息</li><li>dirsearch搜了一遍找不到</li><li>看了wp</li><li>原来是backup.sql</li><li>长点见识</li></ul><h3 id="Web18"><a href="#Web18" class="headerlink" title="Web18"></a>Web18</h3><ul><li><p>打开链接：小鸟游戏（🤯好难，101这是人能到的分数？）</p></li><li><p>估摸是js写的小游戏</p></li><li><p>查看源代码</p></li><li><p><img src="https://img-blog.csdnimg.cn/abb13751e7084b9890488709af0d6c66.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>score&gt;100?嗯？这不是我心心念念的101吗</p></li><li><p><img src="https://img-blog.csdnimg.cn/b1109420a39e443db3a875347249d708.png#pic_center" alt="在这里插入图片描述"></p></li><li><p>编码一下</p></li><li><p>访问110.php</p></li><li><p>flag</p></li></ul><h3 id="Web19"><a href="#Web19" class="headerlink" title="Web19"></a>Web19</h3><ul><li>查看源代码js部分看到username和pazzword</li><li>我这里直接输入框里输过不去</li><li>抓了个包</li><li>得到flag</li></ul><h3 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h3><ul><li>提示：mdb文件是早期asp+access架构的数据库文件，文件泄漏相当于数据库被脱裤了</li><li>盲区 看wp</li><li>访问&#x2F;db&#x2F;db.mdb</li><li>下载文件记事本打开得flag</li></ul>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/07/10/hello-world/"/>
    <url>/2022/07/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre></div><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo server</code></pre></div><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo generate</code></pre></div><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-wrapper"><pre><code class="hljs bash">$ hexo deploy</code></pre></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
